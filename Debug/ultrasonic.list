
ultrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dc0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08003ed0  08003ed0  00013ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fcc  08003fcc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003fcc  08003fcc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fcc  08003fcc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fcc  08003fcc  00013fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fd0  08003fd0  00013fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003fd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  20000070  08004044  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08004044  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b7ce  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000241c  00000000  00000000  0002b867  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb0  00000000  00000000  0002dc88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b78  00000000  00000000  0002e938  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017243  00000000  00000000  0002f4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aec5  00000000  00000000  000466f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00076d74  00000000  00000000  000515b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c832c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c88  00000000  00000000  000c83a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08003eb8 	.word	0x08003eb8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08003eb8 	.word	0x08003eb8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 0310 	add.w	r3, r7, #16
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000940:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <MX_GPIO_Init+0xa8>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a23      	ldr	r2, [pc, #140]	; (80009d4 <MX_GPIO_Init+0xa8>)
 8000946:	f043 0320 	orr.w	r3, r3, #32
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b21      	ldr	r3, [pc, #132]	; (80009d4 <MX_GPIO_Init+0xa8>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0320 	and.w	r3, r3, #32
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000958:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <MX_GPIO_Init+0xa8>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a1d      	ldr	r2, [pc, #116]	; (80009d4 <MX_GPIO_Init+0xa8>)
 800095e:	f043 0304 	orr.w	r3, r3, #4
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <MX_GPIO_Init+0xa8>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000970:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_GPIO_Init+0xa8>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <MX_GPIO_Init+0xa8>)
 8000976:	f043 0308 	orr.w	r3, r3, #8
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MX_GPIO_Init+0xa8>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0308 	and.w	r3, r3, #8
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIGGER_PIN_GPIO_Port, TRIGGER_PIN_Pin, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800098e:	4812      	ldr	r0, [pc, #72]	; (80009d8 <MX_GPIO_Init+0xac>)
 8000990:	f000 ffdb 	bl	800194a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIGGER_PIN_Pin;
 8000994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000998:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2302      	movs	r3, #2
 80009a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIGGER_PIN_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 0310 	add.w	r3, r7, #16
 80009aa:	4619      	mov	r1, r3
 80009ac:	480a      	ldr	r0, [pc, #40]	; (80009d8 <MX_GPIO_Init+0xac>)
 80009ae:	f000 fe5b 	bl	8001668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_PIN_Pin;
 80009b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ECHO_PIN_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	4619      	mov	r1, r3
 80009c6:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_GPIO_Init+0xac>)
 80009c8:	f000 fe4e 	bl	8001668 <HAL_GPIO_Init>

}
 80009cc:	bf00      	nop
 80009ce:	3720      	adds	r7, #32
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40021000 	.word	0x40021000
 80009d8:	40010c00 	.word	0x40010c00

080009dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e2:	f000 fcd9 	bl	8001398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e6:	f000 f837 	bl	8000a58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ea:	f7ff ff9f 	bl	800092c <MX_GPIO_Init>
  MX_TIM1_Init();
 80009ee:	f000 f9e9 	bl	8000dc4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80009f2:	f000 fb2f 	bl	8001054 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80009f6:	f000 fb95 	bl	8001124 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80009fa:	4812      	ldr	r0, [pc, #72]	; (8000a44 <main+0x68>)
 80009fc:	f001 fbd3 	bl	80021a6 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    serialPrint("Getting distance data\n");
 8000a00:	4811      	ldr	r0, [pc, #68]	; (8000a48 <main+0x6c>)
 8000a02:	f000 f86e 	bl	8000ae2 <serialPrint>
    uint32_t u_timer = getUltrasonicTime();
 8000a06:	f002 f901 	bl	8002c0c <getUltrasonicTime>
 8000a0a:	6078      	str	r0, [r7, #4]
    snprintf((char *)data, sizeof(data), "Timer: %lu \n", u_timer);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a0f      	ldr	r2, [pc, #60]	; (8000a4c <main+0x70>)
 8000a10:	2164      	movs	r1, #100	; 0x64
 8000a12:	480f      	ldr	r0, [pc, #60]	; (8000a50 <main+0x74>)
 8000a14:	f002 f9a2 	bl	8002d5c <sniprintf>
    serialPrint((char *)data);
 8000a18:	480d      	ldr	r0, [pc, #52]	; (8000a50 <main+0x74>)
 8000a1a:	f000 f862 	bl	8000ae2 <serialPrint>
    uint32_t distance = getDistance(u_timer);
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f002 f936 	bl	8002c90 <getDistance>
 8000a24:	6038      	str	r0, [r7, #0]
    snprintf((char *)data, sizeof(data), "Distance: %lu \n", distance);
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <main+0x78>)
 8000a2a:	2164      	movs	r1, #100	; 0x64
 8000a2c:	4808      	ldr	r0, [pc, #32]	; (8000a50 <main+0x74>)
 8000a2e:	f002 f995 	bl	8002d5c <sniprintf>
    serialPrint((char *)data);
 8000a32:	4807      	ldr	r0, [pc, #28]	; (8000a50 <main+0x74>)
 8000a34:	f000 f855 	bl	8000ae2 <serialPrint>
    HAL_Delay(1000);
 8000a38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a3c:	f000 fd0e 	bl	800145c <HAL_Delay>
  {
 8000a40:	e7de      	b.n	8000a00 <main+0x24>
 8000a42:	bf00      	nop
 8000a44:	20000388 	.word	0x20000388
 8000a48:	08003ed0 	.word	0x08003ed0
 8000a4c:	08003ee8 	.word	0x08003ee8
 8000a50:	20000324 	.word	0x20000324
 8000a54:	08003ef8 	.word	0x08003ef8

08000a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b090      	sub	sp, #64	; 0x40
 8000a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5e:	f107 0318 	add.w	r3, r7, #24
 8000a62:	2228      	movs	r2, #40	; 0x28
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f002 f958 	bl	8002d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a96:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9c:	f107 0318 	add.w	r3, r7, #24
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 ff6b 	bl	800197c <HAL_RCC_OscConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000aac:	f000 f852 	bl	8000b54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2102      	movs	r1, #2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 f9d6 	bl	8001e7c <HAL_RCC_ClockConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ad6:	f000 f83d 	bl	8000b54 <Error_Handler>
  }
}
 8000ada:	bf00      	nop
 8000adc:	3740      	adds	r7, #64	; 0x40
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <serialPrint>:

/* USER CODE BEGIN 4 */
int serialPrint(const char *string_format, ...)
{
 8000ae2:	b40f      	push	{r0, r1, r2, r3}
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  if (DEVEL)
  {
    return printf(string_format);
 8000ae8:	68b8      	ldr	r0, [r7, #8]
 8000aea:	f002 f91f 	bl	8002d2c <iprintf>
 8000aee:	4603      	mov	r3, r0
  }
  else
  {
    return 0;
  }
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__io_putchar>:

int __io_putchar(uint8_t ch)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
  if (ch)
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d005      	beq.n	8000b18 <__io_putchar+0x1c>
  {
    UART1PutChar(ch);
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 fb6e 	bl	80011f0 <UART1PutChar>
    return ch;
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	e000      	b.n	8000b1a <__io_putchar+0x1e>
  }
  else
  {
    return 0;
 8000b18:	2300      	movs	r3, #0
  }
  
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <delayMicroseconds>:

void delayMicroseconds(uint16_t microseconds)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <delayMicroseconds+0x2c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	; 0x24
  while(__HAL_TIM_GET_COUNTER(&htim1) < microseconds);
 8000b36:	bf00      	nop
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <delayMicroseconds+0x2c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b3e:	88fb      	ldrh	r3, [r7, #6]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d3f9      	bcc.n	8000b38 <delayMicroseconds+0x14>
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	20000388 	.word	0x20000388

08000b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <HAL_MspInit+0x5c>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <HAL_MspInit+0x5c>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6193      	str	r3, [r2, #24]
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_MspInit+0x5c>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <HAL_MspInit+0x5c>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <HAL_MspInit+0x5c>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b88:	61d3      	str	r3, [r2, #28]
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <HAL_MspInit+0x5c>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <HAL_MspInit+0x60>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <HAL_MspInit+0x60>)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40010000 	.word	0x40010000

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <HardFault_Handler+0x4>

08000bd6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <MemManage_Handler+0x4>

08000bdc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <BusFault_Handler+0x4>

08000be2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <UsageFault_Handler+0x4>

08000be8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr

08000bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c10:	f000 fc08 	bl	8001424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
debugUART1IRQHandler();
 8000c1c:	f000 fb24 	bl	8001268 <debugUART1IRQHandler>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr

08000c30 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	e00a      	b.n	8000c58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c42:	f3af 8000 	nop.w
 8000c46:	4601      	mov	r1, r0
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	1c5a      	adds	r2, r3, #1
 8000c4c:	60ba      	str	r2, [r7, #8]
 8000c4e:	b2ca      	uxtb	r2, r1
 8000c50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	3301      	adds	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	697a      	ldr	r2, [r7, #20]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	dbf0      	blt.n	8000c42 <_read+0x12>
	}

return len;
 8000c60:	687b      	ldr	r3, [r7, #4]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b086      	sub	sp, #24
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	60f8      	str	r0, [r7, #12]
 8000c72:	60b9      	str	r1, [r7, #8]
 8000c74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	e009      	b.n	8000c90 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	1c5a      	adds	r2, r3, #1
 8000c80:	60ba      	str	r2, [r7, #8]
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff39 	bl	8000afc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	697a      	ldr	r2, [r7, #20]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	dbf1      	blt.n	8000c7c <_write+0x12>
	}
	return len;
 8000c98:	687b      	ldr	r3, [r7, #4]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <_close>:

int _close(int file)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
	return -1;
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cc8:	605a      	str	r2, [r3, #4]
	return 0;
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr

08000cd6 <_isatty>:

int _isatty(int file)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
	return 1;
 8000cde:	2301      	movs	r3, #1
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr

08000cea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b085      	sub	sp, #20
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
	return 0;
 8000cf6:	2300      	movs	r3, #0
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
	...

08000d04 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <_sbrk+0x50>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <_sbrk+0x16>
		heap_end = &end;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <_sbrk+0x50>)
 8000d16:	4a10      	ldr	r2, [pc, #64]	; (8000d58 <_sbrk+0x54>)
 8000d18:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <_sbrk+0x50>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <_sbrk+0x50>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4413      	add	r3, r2
 8000d28:	466a      	mov	r2, sp
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d907      	bls.n	8000d3e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000d2e:	f001 ffcb 	bl	8002cc8 <__errno>
 8000d32:	4602      	mov	r2, r0
 8000d34:	230c      	movs	r3, #12
 8000d36:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000d38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d3c:	e006      	b.n	8000d4c <_sbrk+0x48>
	}

	heap_end += incr;
 8000d3e:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <_sbrk+0x50>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	4a03      	ldr	r2, [pc, #12]	; (8000d54 <_sbrk+0x50>)
 8000d48:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	2000008c 	.word	0x2000008c
 8000d58:	200003d8 	.word	0x200003d8

08000d5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000d60:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <SystemInit+0x5c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a14      	ldr	r2, [pc, #80]	; (8000db8 <SystemInit+0x5c>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <SystemInit+0x5c>)
 8000d6e:	685a      	ldr	r2, [r3, #4]
 8000d70:	4911      	ldr	r1, [pc, #68]	; (8000db8 <SystemInit+0x5c>)
 8000d72:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <SystemInit+0x60>)
 8000d74:	4013      	ands	r3, r2
 8000d76:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000d78:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <SystemInit+0x5c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0e      	ldr	r2, [pc, #56]	; (8000db8 <SystemInit+0x5c>)
 8000d7e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d86:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <SystemInit+0x5c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <SystemInit+0x5c>)
 8000d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d92:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <SystemInit+0x5c>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <SystemInit+0x5c>)
 8000d9a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000d9e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <SystemInit+0x5c>)
 8000da2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000da6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <SystemInit+0x64>)
 8000daa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dae:	609a      	str	r2, [r3, #8]
#endif 
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	f8ff0000 	.word	0xf8ff0000
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dca:	f107 0308 	add.w	r3, r7, #8
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd8:	463b      	mov	r3, r7
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000de0:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <MX_TIM1_Init+0x98>)
 8000de2:	4a1f      	ldr	r2, [pc, #124]	; (8000e60 <MX_TIM1_Init+0x9c>)
 8000de4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000de6:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <MX_TIM1_Init+0x98>)
 8000de8:	2247      	movs	r2, #71	; 0x47
 8000dea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dec:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <MX_TIM1_Init+0x98>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000df2:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <MX_TIM1_Init+0x98>)
 8000df4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000df8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfa:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <MX_TIM1_Init+0x98>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e00:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <MX_TIM1_Init+0x98>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <MX_TIM1_Init+0x98>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e0c:	4813      	ldr	r0, [pc, #76]	; (8000e5c <MX_TIM1_Init+0x98>)
 8000e0e:	f001 f99f 	bl	8002150 <HAL_TIM_Base_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000e18:	f7ff fe9c 	bl	8000b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e22:	f107 0308 	add.w	r3, r7, #8
 8000e26:	4619      	mov	r1, r3
 8000e28:	480c      	ldr	r0, [pc, #48]	; (8000e5c <MX_TIM1_Init+0x98>)
 8000e2a:	f001 f9df 	bl	80021ec <HAL_TIM_ConfigClockSource>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000e34:	f7ff fe8e 	bl	8000b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e40:	463b      	mov	r3, r7
 8000e42:	4619      	mov	r1, r3
 8000e44:	4805      	ldr	r0, [pc, #20]	; (8000e5c <MX_TIM1_Init+0x98>)
 8000e46:	f001 fb81 	bl	800254c <HAL_TIMEx_MasterConfigSynchronization>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000e50:	f7ff fe80 	bl	8000b54 <Error_Handler>
  }

}
 8000e54:	bf00      	nop
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000388 	.word	0x20000388
 8000e60:	40012c00 	.word	0x40012c00

08000e64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a09      	ldr	r2, [pc, #36]	; (8000e98 <HAL_TIM_Base_MspInit+0x34>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d10b      	bne.n	8000e8e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <HAL_TIM_Base_MspInit+0x38>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	4a08      	ldr	r2, [pc, #32]	; (8000e9c <HAL_TIM_Base_MspInit+0x38>)
 8000e7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e80:	6193      	str	r3, [r2, #24]
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_TIM_Base_MspInit+0x38>)
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000e8e:	bf00      	nop
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr
 8000e98:	40012c00 	.word	0x40012c00
 8000e9c:	40021000 	.word	0x40021000

08000ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	f003 0307 	and.w	r3, r3, #7
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	db0b      	blt.n	8000ee6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	f003 021f 	and.w	r2, r3, #31
 8000ed4:	4906      	ldr	r1, [pc, #24]	; (8000ef0 <__NVIC_EnableIRQ+0x34>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	095b      	lsrs	r3, r3, #5
 8000edc:	2001      	movs	r0, #1
 8000ede:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	e000e100 	.word	0xe000e100

08000ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	db0a      	blt.n	8000f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	490c      	ldr	r1, [pc, #48]	; (8000f40 <__NVIC_SetPriority+0x4c>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	0112      	lsls	r2, r2, #4
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	440b      	add	r3, r1
 8000f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f1c:	e00a      	b.n	8000f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4908      	ldr	r1, [pc, #32]	; (8000f44 <__NVIC_SetPriority+0x50>)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	f003 030f 	and.w	r3, r3, #15
 8000f2a:	3b04      	subs	r3, #4
 8000f2c:	0112      	lsls	r2, r2, #4
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	440b      	add	r3, r1
 8000f32:	761a      	strb	r2, [r3, #24]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000e100 	.word	0xe000e100
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f1c3 0307 	rsb	r3, r3, #7
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	bf28      	it	cs
 8000f66:	2304      	movcs	r3, #4
 8000f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	2b06      	cmp	r3, #6
 8000f70:	d902      	bls.n	8000f78 <NVIC_EncodePriority+0x30>
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3b03      	subs	r3, #3
 8000f76:	e000      	b.n	8000f7a <NVIC_EncodePriority+0x32>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43da      	mvns	r2, r3
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	43d9      	mvns	r1, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	4313      	orrs	r3, r2
         );
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3724      	adds	r7, #36	; 0x24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr

08000fac <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	60da      	str	r2, [r3, #12]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr

08000fca <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	615a      	str	r2, [r3, #20]
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ffe:	69da      	ldr	r2, [r3, #28]
 8001000:	4907      	ldr	r1, [pc, #28]	; (8001020 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4313      	orrs	r3, r2
 8001006:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <LL_APB1_GRP1_EnableClock+0x2c>)
 800100a:	69da      	ldr	r2, [r3, #28]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4013      	ands	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001012:	68fb      	ldr	r3, [r7, #12]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	40021000 	.word	0x40021000

08001024 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <LL_APB2_GRP1_EnableClock+0x2c>)
 800102e:	699a      	ldr	r2, [r3, #24]
 8001030:	4907      	ldr	r1, [pc, #28]	; (8001050 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4313      	orrs	r3, r2
 8001036:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <LL_APB2_GRP1_EnableClock+0x2c>)
 800103a:	699a      	ldr	r2, [r3, #24]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4013      	ands	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000

08001054 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	; 0x30
 8001058:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]
 800106a:	615a      	str	r2, [r3, #20]
 800106c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106e:	463b      	mov	r3, r7
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800107c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001080:	f7ff ffd0 	bl	8001024 <LL_APB2_GRP1_EnableClock>
  
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001084:	2004      	movs	r0, #4
 8001086:	f7ff ffcd 	bl	8001024 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration  
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800108a:	4b22      	ldr	r3, [pc, #136]	; (8001114 <MX_USART1_UART_Init+0xc0>)
 800108c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800108e:	2309      	movs	r3, #9
 8001090:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	463b      	mov	r3, r7
 800109c:	4619      	mov	r1, r3
 800109e:	481e      	ldr	r0, [pc, #120]	; (8001118 <MX_USART1_UART_Init+0xc4>)
 80010a0:	f001 fb50 	bl	8002744 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80010a4:	4b1d      	ldr	r3, [pc, #116]	; (800111c <MX_USART1_UART_Init+0xc8>)
 80010a6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80010a8:	2304      	movs	r3, #4
 80010aa:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	463b      	mov	r3, r7
 80010ae:	4619      	mov	r1, r3
 80010b0:	4819      	ldr	r0, [pc, #100]	; (8001118 <MX_USART1_UART_Init+0xc4>)
 80010b2:	f001 fb47 	bl	8002744 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80010b6:	f7ff fef3 	bl	8000ea0 <__NVIC_GetPriorityGrouping>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2200      	movs	r2, #0
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff41 	bl	8000f48 <NVIC_EncodePriority>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4619      	mov	r1, r3
 80010ca:	2025      	movs	r0, #37	; 0x25
 80010cc:	f7ff ff12 	bl	8000ef4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80010d0:	2025      	movs	r0, #37	; 0x25
 80010d2:	f7ff fef3 	bl	8000ebc <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 80010d6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80010da:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80010dc:	2300      	movs	r3, #0
 80010de:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80010e8:	230c      	movs	r3, #12
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80010f0:	2300      	movs	r3, #0
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	4809      	ldr	r0, [pc, #36]	; (8001120 <MX_USART1_UART_Init+0xcc>)
 80010fc:	f001 fd26 	bl	8002b4c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001100:	4807      	ldr	r0, [pc, #28]	; (8001120 <MX_USART1_UART_Init+0xcc>)
 8001102:	f7ff ff62 	bl	8000fca <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001106:	4806      	ldr	r0, [pc, #24]	; (8001120 <MX_USART1_UART_Init+0xcc>)
 8001108:	f7ff ff50 	bl	8000fac <LL_USART_Enable>

}
 800110c:	bf00      	nop
 800110e:	3730      	adds	r7, #48	; 0x30
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	04020002 	.word	0x04020002
 8001118:	40010800 	.word	0x40010800
 800111c:	04040004 	.word	0x04040004
 8001120:	40013800 	.word	0x40013800

08001124 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08c      	sub	sp, #48	; 0x30
 8001128:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]
 800113a:	615a      	str	r2, [r3, #20]
 800113c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	463b      	mov	r3, r7
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800114c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001150:	f7ff ff50 	bl	8000ff4 <LL_APB1_GRP1_EnableClock>
  
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001154:	2004      	movs	r0, #4
 8001156:	f7ff ff65 	bl	8001024 <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800115a:	f240 4304 	movw	r3, #1028	; 0x404
 800115e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001160:	2309      	movs	r3, #9
 8001162:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001164:	2303      	movs	r3, #3
 8001166:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116c:	463b      	mov	r3, r7
 800116e:	4619      	mov	r1, r3
 8001170:	481d      	ldr	r0, [pc, #116]	; (80011e8 <MX_USART2_UART_Init+0xc4>)
 8001172:	f001 fae7 	bl	8002744 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001176:	f640 0308 	movw	r3, #2056	; 0x808
 800117a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 800117c:	2304      	movs	r3, #4
 800117e:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001180:	463b      	mov	r3, r7
 8001182:	4619      	mov	r1, r3
 8001184:	4818      	ldr	r0, [pc, #96]	; (80011e8 <MX_USART2_UART_Init+0xc4>)
 8001186:	f001 fadd 	bl	8002744 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800118a:	f7ff fe89 	bl	8000ea0 <__NVIC_GetPriorityGrouping>
 800118e:	4603      	mov	r3, r0
 8001190:	2200      	movs	r2, #0
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fed7 	bl	8000f48 <NVIC_EncodePriority>
 800119a:	4603      	mov	r3, r0
 800119c:	4619      	mov	r1, r3
 800119e:	2026      	movs	r0, #38	; 0x26
 80011a0:	f7ff fea8 	bl	8000ef4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80011a4:	2026      	movs	r0, #38	; 0x26
 80011a6:	f7ff fe89 	bl	8000ebc <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 80011aa:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80011ae:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80011bc:	230c      	movs	r3, #12
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80011c4:	2300      	movs	r3, #0
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4619      	mov	r1, r3
 80011ce:	4807      	ldr	r0, [pc, #28]	; (80011ec <MX_USART2_UART_Init+0xc8>)
 80011d0:	f001 fcbc 	bl	8002b4c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80011d4:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_USART2_UART_Init+0xc8>)
 80011d6:	f7ff fef8 	bl	8000fca <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80011da:	4804      	ldr	r0, [pc, #16]	; (80011ec <MX_USART2_UART_Init+0xc8>)
 80011dc:	f7ff fee6 	bl	8000fac <LL_USART_Enable>

}
 80011e0:	bf00      	nop
 80011e2:	3730      	adds	r7, #48	; 0x30
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40010800 	.word	0x40010800
 80011ec:	40004400 	.word	0x40004400

080011f0 <UART1PutChar>:

	return d;
}

void UART1PutChar(uint8_t d)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]

	int i;
	while(UART1Fifo.tct >= UART1_TXB) ;
 80011fa:	bf00      	nop
 80011fc:	4b18      	ldr	r3, [pc, #96]	; (8001260 <UART1PutChar+0x70>)
 80011fe:	889b      	ldrh	r3, [r3, #4]
 8001200:	b29b      	uxth	r3, r3
 8001202:	2b7f      	cmp	r3, #127	; 0x7f
 8001204:	d8fa      	bhi.n	80011fc <UART1PutChar+0xc>

	i = UART1Fifo.twi;
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <UART1PutChar+0x70>)
 8001208:	885b      	ldrh	r3, [r3, #2]
 800120a:	b29b      	uxth	r3, r3
 800120c:	60fb      	str	r3, [r7, #12]
	UART1Fifo.tbuf[i] = d;
 800120e:	4a14      	ldr	r2, [pc, #80]	; (8001260 <UART1PutChar+0x70>)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4413      	add	r3, r2
 8001214:	330c      	adds	r3, #12
 8001216:	79fa      	ldrb	r2, [r7, #7]
 8001218:	701a      	strb	r2, [r3, #0]
	UART1Fifo.twi     = ++i % UART1_TXB;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	3301      	adds	r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	425a      	negs	r2, r3
 8001224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001228:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800122c:	bf58      	it	pl
 800122e:	4253      	negpl	r3, r2
 8001230:	b29a      	uxth	r2, r3
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <UART1PutChar+0x70>)
 8001234:	805a      	strh	r2, [r3, #2]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001236:	b672      	cpsid	i
	__disable_irq();
	UART1Fifo.tct++;
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <UART1PutChar+0x70>)
 800123a:	889b      	ldrh	r3, [r3, #4]
 800123c:	b29b      	uxth	r3, r3
 800123e:	3301      	adds	r3, #1
 8001240:	b29a      	uxth	r2, r3
 8001242:	4b07      	ldr	r3, [pc, #28]	; (8001260 <UART1PutChar+0x70>)
 8001244:	809a      	strh	r2, [r3, #4]
	USART1->CR1 |= _BV(7);
 8001246:	4b07      	ldr	r3, [pc, #28]	; (8001264 <UART1PutChar+0x74>)
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	4a06      	ldr	r2, [pc, #24]	; (8001264 <UART1PutChar+0x74>)
 800124c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001250:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8001252:	b662      	cpsie	i
	__enable_irq();

}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000090 	.word	0x20000090
 8001264:	40013800 	.word	0x40013800

08001268 <debugUART1IRQHandler>:

void debugUART1IRQHandler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
	uint32_t sr = USART1->SR;
 800126e:	4b35      	ldr	r3, [pc, #212]	; (8001344 <debugUART1IRQHandler+0xdc>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	60fb      	str	r3, [r7, #12]
	uint8_t  d;
	int i;

	if(sr & _BV(5))
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f003 0320 	and.w	r3, r3, #32
 800127a:	2b00      	cmp	r3, #0
 800127c:	d029      	beq.n	80012d2 <debugUART1IRQHandler+0x6a>
	{
		d = USART1->DR;
 800127e:	4b31      	ldr	r3, [pc, #196]	; (8001344 <debugUART1IRQHandler+0xdc>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	72fb      	strb	r3, [r7, #11]
		i = UART1Fifo.rct;
 8001284:	4b30      	ldr	r3, [pc, #192]	; (8001348 <debugUART1IRQHandler+0xe0>)
 8001286:	895b      	ldrh	r3, [r3, #10]
 8001288:	b29b      	uxth	r3, r3
 800128a:	607b      	str	r3, [r7, #4]
		if(i < UART1_RXB)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001292:	da1e      	bge.n	80012d2 <debugUART1IRQHandler+0x6a>
		{
			UART1Fifo.rct = ++i;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3301      	adds	r3, #1
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	b29a      	uxth	r2, r3
 800129e:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <debugUART1IRQHandler+0xe0>)
 80012a0:	815a      	strh	r2, [r3, #10]
			i = UART1Fifo.rwi;
 80012a2:	4b29      	ldr	r3, [pc, #164]	; (8001348 <debugUART1IRQHandler+0xe0>)
 80012a4:	891b      	ldrh	r3, [r3, #8]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	607b      	str	r3, [r7, #4]
			UART1Fifo.rbuf[i] = d;
 80012aa:	4a27      	ldr	r2, [pc, #156]	; (8001348 <debugUART1IRQHandler+0xe0>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4413      	add	r3, r2
 80012b0:	338c      	adds	r3, #140	; 0x8c
 80012b2:	7afa      	ldrb	r2, [r7, #11]
 80012b4:	701a      	strb	r2, [r3, #0]
			UART1Fifo.rwi = ++i % UART1_RXB;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3301      	adds	r3, #1
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	425a      	negs	r2, r3
 80012c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80012c8:	bf58      	it	pl
 80012ca:	4253      	negpl	r3, r2
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <debugUART1IRQHandler+0xe0>)
 80012d0:	811a      	strh	r2, [r3, #8]
		}
	}
	if(sr & _BV(7))
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d02d      	beq.n	8001338 <debugUART1IRQHandler+0xd0>
	{
		i = UART1Fifo.tct;
 80012dc:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <debugUART1IRQHandler+0xe0>)
 80012de:	889b      	ldrh	r3, [r3, #4]
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	607b      	str	r3, [r7, #4]
		if(i--)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	1e5a      	subs	r2, r3, #1
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d01e      	beq.n	800132c <debugUART1IRQHandler+0xc4>
		{
			UART1Fifo.tct = (uint16_t)i;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <debugUART1IRQHandler+0xe0>)
 80012f4:	809a      	strh	r2, [r3, #4]
			i = UART1Fifo.tri;
 80012f6:	4b14      	ldr	r3, [pc, #80]	; (8001348 <debugUART1IRQHandler+0xe0>)
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	607b      	str	r3, [r7, #4]
			USART1->DR =  UART1Fifo.tbuf[i];
 80012fe:	4a12      	ldr	r2, [pc, #72]	; (8001348 <debugUART1IRQHandler+0xe0>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4413      	add	r3, r2
 8001304:	330c      	adds	r3, #12
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <debugUART1IRQHandler+0xdc>)
 800130c:	605a      	str	r2, [r3, #4]
			UART1Fifo.tri = ++i % UART1_TXB;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3301      	adds	r3, #1
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	425a      	negs	r2, r3
 8001318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800131c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001320:	bf58      	it	pl
 8001322:	4253      	negpl	r3, r2
 8001324:	b29a      	uxth	r2, r3
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <debugUART1IRQHandler+0xe0>)
 8001328:	801a      	strh	r2, [r3, #0]
		} else {
			USART1->CR1 &= ~_BV(7);
		}
	}
}
 800132a:	e005      	b.n	8001338 <debugUART1IRQHandler+0xd0>
			USART1->CR1 &= ~_BV(7);
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <debugUART1IRQHandler+0xdc>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	4a04      	ldr	r2, [pc, #16]	; (8001344 <debugUART1IRQHandler+0xdc>)
 8001332:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001336:	60d3      	str	r3, [r2, #12]
}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40013800 	.word	0x40013800
 8001348:	20000090 	.word	0x20000090

0800134c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800134c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800134e:	e003      	b.n	8001358 <LoopCopyDataInit>

08001350 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001352:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001354:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001356:	3104      	adds	r1, #4

08001358 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001358:	480a      	ldr	r0, [pc, #40]	; (8001384 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800135c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800135e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001360:	d3f6      	bcc.n	8001350 <CopyDataInit>
  ldr r2, =_sbss
 8001362:	4a0a      	ldr	r2, [pc, #40]	; (800138c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001364:	e002      	b.n	800136c <LoopFillZerobss>

08001366 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001368:	f842 3b04 	str.w	r3, [r2], #4

0800136c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800136e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001370:	d3f9      	bcc.n	8001366 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001372:	f7ff fcf3 	bl	8000d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001376:	f001 fcad 	bl	8002cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800137a:	f7ff fb2f 	bl	80009dc <main>
  bx lr
 800137e:	4770      	bx	lr
  ldr r3, =_sidata
 8001380:	08003fd4 	.word	0x08003fd4
  ldr r0, =_sdata
 8001384:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001388:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800138c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001390:	200003d4 	.word	0x200003d4

08001394 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001394:	e7fe      	b.n	8001394 <ADC1_2_IRQHandler>
	...

08001398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <HAL_Init+0x28>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a07      	ldr	r2, [pc, #28]	; (80013c0 <HAL_Init+0x28>)
 80013a2:	f043 0310 	orr.w	r3, r3, #16
 80013a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 f929 	bl	8001600 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ae:	2000      	movs	r0, #0
 80013b0:	f000 f808 	bl	80013c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b4:	f7ff fbd4 	bl	8000b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40022000 	.word	0x40022000

080013c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_InitTick+0x54>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_InitTick+0x58>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4619      	mov	r1, r3
 80013d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013da:	fbb3 f3f1 	udiv	r3, r3, r1
 80013de:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 f933 	bl	800164e <HAL_SYSTICK_Config>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00e      	b.n	8001410 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b0f      	cmp	r3, #15
 80013f6:	d80a      	bhi.n	800140e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f8:	2200      	movs	r2, #0
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001400:	f000 f909 	bl	8001616 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001404:	4a06      	ldr	r2, [pc, #24]	; (8001420 <HAL_InitTick+0x5c>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	e000      	b.n	8001410 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000000 	.word	0x20000000
 800141c:	20000008 	.word	0x20000008
 8001420:	20000004 	.word	0x20000004

08001424 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <HAL_IncTick+0x1c>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_IncTick+0x20>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4413      	add	r3, r2
 8001434:	4a03      	ldr	r2, [pc, #12]	; (8001444 <HAL_IncTick+0x20>)
 8001436:	6013      	str	r3, [r2, #0]
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	20000008 	.word	0x20000008
 8001444:	200003c8 	.word	0x200003c8

08001448 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return uwTick;
 800144c:	4b02      	ldr	r3, [pc, #8]	; (8001458 <HAL_GetTick+0x10>)
 800144e:	681b      	ldr	r3, [r3, #0]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	200003c8 	.word	0x200003c8

0800145c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001464:	f7ff fff0 	bl	8001448 <HAL_GetTick>
 8001468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001474:	d005      	beq.n	8001482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <HAL_Delay+0x40>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4413      	add	r3, r2
 8001480:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001482:	bf00      	nop
 8001484:	f7ff ffe0 	bl	8001448 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	429a      	cmp	r2, r3
 8001492:	d8f7      	bhi.n	8001484 <HAL_Delay+0x28>
  {
  }
}
 8001494:	bf00      	nop
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000008 	.word	0x20000008

080014a0 <__NVIC_SetPriorityGrouping>:
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014bc:	4013      	ands	r3, r2
 80014be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d2:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	60d3      	str	r3, [r2, #12]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_GetPriorityGrouping>:
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <__NVIC_GetPriorityGrouping+0x18>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	f003 0307 	and.w	r3, r3, #7
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_SetPriority>:
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	2b00      	cmp	r3, #0
 8001516:	db0a      	blt.n	800152e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	490c      	ldr	r1, [pc, #48]	; (8001550 <__NVIC_SetPriority+0x4c>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	0112      	lsls	r2, r2, #4
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	440b      	add	r3, r1
 8001528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800152c:	e00a      	b.n	8001544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4908      	ldr	r1, [pc, #32]	; (8001554 <__NVIC_SetPriority+0x50>)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	3b04      	subs	r3, #4
 800153c:	0112      	lsls	r2, r2, #4
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	440b      	add	r3, r1
 8001542:	761a      	strb	r2, [r3, #24]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000e100 	.word	0xe000e100
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <NVIC_EncodePriority>:
{
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	; 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f1c3 0307 	rsb	r3, r3, #7
 8001572:	2b04      	cmp	r3, #4
 8001574:	bf28      	it	cs
 8001576:	2304      	movcs	r3, #4
 8001578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3304      	adds	r3, #4
 800157e:	2b06      	cmp	r3, #6
 8001580:	d902      	bls.n	8001588 <NVIC_EncodePriority+0x30>
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3b03      	subs	r3, #3
 8001586:	e000      	b.n	800158a <NVIC_EncodePriority+0x32>
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43da      	mvns	r2, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	401a      	ands	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	43d9      	mvns	r1, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	4313      	orrs	r3, r2
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3724      	adds	r7, #36	; 0x24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015cc:	d301      	bcc.n	80015d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00f      	b.n	80015f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d2:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <SysTick_Config+0x40>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015da:	210f      	movs	r1, #15
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015e0:	f7ff ff90 	bl	8001504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <SysTick_Config+0x40>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ea:	4b04      	ldr	r3, [pc, #16]	; (80015fc <SysTick_Config+0x40>)
 80015ec:	2207      	movs	r2, #7
 80015ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	e000e010 	.word	0xe000e010

08001600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff ff49 	bl	80014a0 <__NVIC_SetPriorityGrouping>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001616:	b580      	push	{r7, lr}
 8001618:	b086      	sub	sp, #24
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
 8001622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001628:	f7ff ff5e 	bl	80014e8 <__NVIC_GetPriorityGrouping>
 800162c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	6978      	ldr	r0, [r7, #20]
 8001634:	f7ff ff90 	bl	8001558 <NVIC_EncodePriority>
 8001638:	4602      	mov	r2, r0
 800163a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff5f 	bl	8001504 <__NVIC_SetPriority>
}
 8001646:	bf00      	nop
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff ffb0 	bl	80015bc <SysTick_Config>
 800165c:	4603      	mov	r3, r0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001668:	b480      	push	{r7}
 800166a:	b08b      	sub	sp, #44	; 0x2c
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001672:	2300      	movs	r3, #0
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167a:	e127      	b.n	80018cc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800167c:	2201      	movs	r2, #1
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	69fa      	ldr	r2, [r7, #28]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	429a      	cmp	r2, r3
 8001696:	f040 8116 	bne.w	80018c6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b12      	cmp	r3, #18
 80016a0:	d034      	beq.n	800170c <HAL_GPIO_Init+0xa4>
 80016a2:	2b12      	cmp	r3, #18
 80016a4:	d80d      	bhi.n	80016c2 <HAL_GPIO_Init+0x5a>
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d02b      	beq.n	8001702 <HAL_GPIO_Init+0x9a>
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d804      	bhi.n	80016b8 <HAL_GPIO_Init+0x50>
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d031      	beq.n	8001716 <HAL_GPIO_Init+0xae>
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d01c      	beq.n	80016f0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016b6:	e048      	b.n	800174a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d043      	beq.n	8001744 <HAL_GPIO_Init+0xdc>
 80016bc:	2b11      	cmp	r3, #17
 80016be:	d01b      	beq.n	80016f8 <HAL_GPIO_Init+0x90>
          break;
 80016c0:	e043      	b.n	800174a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016c2:	4a89      	ldr	r2, [pc, #548]	; (80018e8 <HAL_GPIO_Init+0x280>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d026      	beq.n	8001716 <HAL_GPIO_Init+0xae>
 80016c8:	4a87      	ldr	r2, [pc, #540]	; (80018e8 <HAL_GPIO_Init+0x280>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d806      	bhi.n	80016dc <HAL_GPIO_Init+0x74>
 80016ce:	4a87      	ldr	r2, [pc, #540]	; (80018ec <HAL_GPIO_Init+0x284>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d020      	beq.n	8001716 <HAL_GPIO_Init+0xae>
 80016d4:	4a86      	ldr	r2, [pc, #536]	; (80018f0 <HAL_GPIO_Init+0x288>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d01d      	beq.n	8001716 <HAL_GPIO_Init+0xae>
          break;
 80016da:	e036      	b.n	800174a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016dc:	4a85      	ldr	r2, [pc, #532]	; (80018f4 <HAL_GPIO_Init+0x28c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d019      	beq.n	8001716 <HAL_GPIO_Init+0xae>
 80016e2:	4a85      	ldr	r2, [pc, #532]	; (80018f8 <HAL_GPIO_Init+0x290>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d016      	beq.n	8001716 <HAL_GPIO_Init+0xae>
 80016e8:	4a84      	ldr	r2, [pc, #528]	; (80018fc <HAL_GPIO_Init+0x294>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d013      	beq.n	8001716 <HAL_GPIO_Init+0xae>
          break;
 80016ee:	e02c      	b.n	800174a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	623b      	str	r3, [r7, #32]
          break;
 80016f6:	e028      	b.n	800174a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	3304      	adds	r3, #4
 80016fe:	623b      	str	r3, [r7, #32]
          break;
 8001700:	e023      	b.n	800174a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	3308      	adds	r3, #8
 8001708:	623b      	str	r3, [r7, #32]
          break;
 800170a:	e01e      	b.n	800174a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	330c      	adds	r3, #12
 8001712:	623b      	str	r3, [r7, #32]
          break;
 8001714:	e019      	b.n	800174a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d102      	bne.n	8001724 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800171e:	2304      	movs	r3, #4
 8001720:	623b      	str	r3, [r7, #32]
          break;
 8001722:	e012      	b.n	800174a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d105      	bne.n	8001738 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800172c:	2308      	movs	r3, #8
 800172e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69fa      	ldr	r2, [r7, #28]
 8001734:	611a      	str	r2, [r3, #16]
          break;
 8001736:	e008      	b.n	800174a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001738:	2308      	movs	r3, #8
 800173a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69fa      	ldr	r2, [r7, #28]
 8001740:	615a      	str	r2, [r3, #20]
          break;
 8001742:	e002      	b.n	800174a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001744:	2300      	movs	r3, #0
 8001746:	623b      	str	r3, [r7, #32]
          break;
 8001748:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	2bff      	cmp	r3, #255	; 0xff
 800174e:	d801      	bhi.n	8001754 <HAL_GPIO_Init+0xec>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	e001      	b.n	8001758 <HAL_GPIO_Init+0xf0>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3304      	adds	r3, #4
 8001758:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	2bff      	cmp	r3, #255	; 0xff
 800175e:	d802      	bhi.n	8001766 <HAL_GPIO_Init+0xfe>
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	e002      	b.n	800176c <HAL_GPIO_Init+0x104>
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	3b08      	subs	r3, #8
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	210f      	movs	r1, #15
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	fa01 f303 	lsl.w	r3, r1, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	401a      	ands	r2, r3
 800177e:	6a39      	ldr	r1, [r7, #32]
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	fa01 f303 	lsl.w	r3, r1, r3
 8001786:	431a      	orrs	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 8096 	beq.w	80018c6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800179a:	4b59      	ldr	r3, [pc, #356]	; (8001900 <HAL_GPIO_Init+0x298>)
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	4a58      	ldr	r2, [pc, #352]	; (8001900 <HAL_GPIO_Init+0x298>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6193      	str	r3, [r2, #24]
 80017a6:	4b56      	ldr	r3, [pc, #344]	; (8001900 <HAL_GPIO_Init+0x298>)
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017b2:	4a54      	ldr	r2, [pc, #336]	; (8001904 <HAL_GPIO_Init+0x29c>)
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	089b      	lsrs	r3, r3, #2
 80017b8:	3302      	adds	r3, #2
 80017ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017be:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	220f      	movs	r2, #15
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	4013      	ands	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a4b      	ldr	r2, [pc, #300]	; (8001908 <HAL_GPIO_Init+0x2a0>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d013      	beq.n	8001806 <HAL_GPIO_Init+0x19e>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a4a      	ldr	r2, [pc, #296]	; (800190c <HAL_GPIO_Init+0x2a4>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d00d      	beq.n	8001802 <HAL_GPIO_Init+0x19a>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a49      	ldr	r2, [pc, #292]	; (8001910 <HAL_GPIO_Init+0x2a8>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d007      	beq.n	80017fe <HAL_GPIO_Init+0x196>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a48      	ldr	r2, [pc, #288]	; (8001914 <HAL_GPIO_Init+0x2ac>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d101      	bne.n	80017fa <HAL_GPIO_Init+0x192>
 80017f6:	2303      	movs	r3, #3
 80017f8:	e006      	b.n	8001808 <HAL_GPIO_Init+0x1a0>
 80017fa:	2304      	movs	r3, #4
 80017fc:	e004      	b.n	8001808 <HAL_GPIO_Init+0x1a0>
 80017fe:	2302      	movs	r3, #2
 8001800:	e002      	b.n	8001808 <HAL_GPIO_Init+0x1a0>
 8001802:	2301      	movs	r3, #1
 8001804:	e000      	b.n	8001808 <HAL_GPIO_Init+0x1a0>
 8001806:	2300      	movs	r3, #0
 8001808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800180a:	f002 0203 	and.w	r2, r2, #3
 800180e:	0092      	lsls	r2, r2, #2
 8001810:	4093      	lsls	r3, r2
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	4313      	orrs	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001818:	493a      	ldr	r1, [pc, #232]	; (8001904 <HAL_GPIO_Init+0x29c>)
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	089b      	lsrs	r3, r3, #2
 800181e:	3302      	adds	r3, #2
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d006      	beq.n	8001840 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001832:	4b39      	ldr	r3, [pc, #228]	; (8001918 <HAL_GPIO_Init+0x2b0>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	4938      	ldr	r1, [pc, #224]	; (8001918 <HAL_GPIO_Init+0x2b0>)
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]
 800183e:	e006      	b.n	800184e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001840:	4b35      	ldr	r3, [pc, #212]	; (8001918 <HAL_GPIO_Init+0x2b0>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	43db      	mvns	r3, r3
 8001848:	4933      	ldr	r1, [pc, #204]	; (8001918 <HAL_GPIO_Init+0x2b0>)
 800184a:	4013      	ands	r3, r2
 800184c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d006      	beq.n	8001868 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800185a:	4b2f      	ldr	r3, [pc, #188]	; (8001918 <HAL_GPIO_Init+0x2b0>)
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	492e      	ldr	r1, [pc, #184]	; (8001918 <HAL_GPIO_Init+0x2b0>)
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	4313      	orrs	r3, r2
 8001864:	604b      	str	r3, [r1, #4]
 8001866:	e006      	b.n	8001876 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001868:	4b2b      	ldr	r3, [pc, #172]	; (8001918 <HAL_GPIO_Init+0x2b0>)
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	43db      	mvns	r3, r3
 8001870:	4929      	ldr	r1, [pc, #164]	; (8001918 <HAL_GPIO_Init+0x2b0>)
 8001872:	4013      	ands	r3, r2
 8001874:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d006      	beq.n	8001890 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001882:	4b25      	ldr	r3, [pc, #148]	; (8001918 <HAL_GPIO_Init+0x2b0>)
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	4924      	ldr	r1, [pc, #144]	; (8001918 <HAL_GPIO_Init+0x2b0>)
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	4313      	orrs	r3, r2
 800188c:	608b      	str	r3, [r1, #8]
 800188e:	e006      	b.n	800189e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001890:	4b21      	ldr	r3, [pc, #132]	; (8001918 <HAL_GPIO_Init+0x2b0>)
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	43db      	mvns	r3, r3
 8001898:	491f      	ldr	r1, [pc, #124]	; (8001918 <HAL_GPIO_Init+0x2b0>)
 800189a:	4013      	ands	r3, r2
 800189c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d006      	beq.n	80018b8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018aa:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <HAL_GPIO_Init+0x2b0>)
 80018ac:	68da      	ldr	r2, [r3, #12]
 80018ae:	491a      	ldr	r1, [pc, #104]	; (8001918 <HAL_GPIO_Init+0x2b0>)
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	60cb      	str	r3, [r1, #12]
 80018b6:	e006      	b.n	80018c6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <HAL_GPIO_Init+0x2b0>)
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	43db      	mvns	r3, r3
 80018c0:	4915      	ldr	r1, [pc, #84]	; (8001918 <HAL_GPIO_Init+0x2b0>)
 80018c2:	4013      	ands	r3, r2
 80018c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	3301      	adds	r3, #1
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	fa22 f303 	lsr.w	r3, r2, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f47f aed0 	bne.w	800167c <HAL_GPIO_Init+0x14>
  }
}
 80018dc:	bf00      	nop
 80018de:	372c      	adds	r7, #44	; 0x2c
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	10210000 	.word	0x10210000
 80018ec:	10110000 	.word	0x10110000
 80018f0:	10120000 	.word	0x10120000
 80018f4:	10310000 	.word	0x10310000
 80018f8:	10320000 	.word	0x10320000
 80018fc:	10220000 	.word	0x10220000
 8001900:	40021000 	.word	0x40021000
 8001904:	40010000 	.word	0x40010000
 8001908:	40010800 	.word	0x40010800
 800190c:	40010c00 	.word	0x40010c00
 8001910:	40011000 	.word	0x40011000
 8001914:	40011400 	.word	0x40011400
 8001918:	40010400 	.word	0x40010400

0800191c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	887b      	ldrh	r3, [r7, #2]
 800192e:	4013      	ands	r3, r2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d002      	beq.n	800193a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001934:	2301      	movs	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]
 8001938:	e001      	b.n	800193e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800193a:	2300      	movs	r3, #0
 800193c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800193e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr

0800194a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	460b      	mov	r3, r1
 8001954:	807b      	strh	r3, [r7, #2]
 8001956:	4613      	mov	r3, r2
 8001958:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800195a:	787b      	ldrb	r3, [r7, #1]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001960:	887a      	ldrh	r2, [r7, #2]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001966:	e003      	b.n	8001970 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001968:	887b      	ldrh	r3, [r7, #2]
 800196a:	041a      	lsls	r2, r3, #16
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	611a      	str	r2, [r3, #16]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
	...

0800197c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e26c      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 8087 	beq.w	8001aaa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800199c:	4b92      	ldr	r3, [pc, #584]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 030c 	and.w	r3, r3, #12
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d00c      	beq.n	80019c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019a8:	4b8f      	ldr	r3, [pc, #572]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 030c 	and.w	r3, r3, #12
 80019b0:	2b08      	cmp	r3, #8
 80019b2:	d112      	bne.n	80019da <HAL_RCC_OscConfig+0x5e>
 80019b4:	4b8c      	ldr	r3, [pc, #560]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c0:	d10b      	bne.n	80019da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c2:	4b89      	ldr	r3, [pc, #548]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d06c      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x12c>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d168      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e246      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e2:	d106      	bne.n	80019f2 <HAL_RCC_OscConfig+0x76>
 80019e4:	4b80      	ldr	r3, [pc, #512]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a7f      	ldr	r2, [pc, #508]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 80019ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	e02e      	b.n	8001a50 <HAL_RCC_OscConfig+0xd4>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10c      	bne.n	8001a14 <HAL_RCC_OscConfig+0x98>
 80019fa:	4b7b      	ldr	r3, [pc, #492]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a7a      	ldr	r2, [pc, #488]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	4b78      	ldr	r3, [pc, #480]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a77      	ldr	r2, [pc, #476]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	e01d      	b.n	8001a50 <HAL_RCC_OscConfig+0xd4>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a1c:	d10c      	bne.n	8001a38 <HAL_RCC_OscConfig+0xbc>
 8001a1e:	4b72      	ldr	r3, [pc, #456]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a71      	ldr	r2, [pc, #452]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	4b6f      	ldr	r3, [pc, #444]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a6e      	ldr	r2, [pc, #440]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	e00b      	b.n	8001a50 <HAL_RCC_OscConfig+0xd4>
 8001a38:	4b6b      	ldr	r3, [pc, #428]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a6a      	ldr	r2, [pc, #424]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	4b68      	ldr	r3, [pc, #416]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a67      	ldr	r2, [pc, #412]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d013      	beq.n	8001a80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a58:	f7ff fcf6 	bl	8001448 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a60:	f7ff fcf2 	bl	8001448 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b64      	cmp	r3, #100	; 0x64
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e1fa      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a72:	4b5d      	ldr	r3, [pc, #372]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0xe4>
 8001a7e:	e014      	b.n	8001aaa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a80:	f7ff fce2 	bl	8001448 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a88:	f7ff fcde 	bl	8001448 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b64      	cmp	r3, #100	; 0x64
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e1e6      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9a:	4b53      	ldr	r3, [pc, #332]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f0      	bne.n	8001a88 <HAL_RCC_OscConfig+0x10c>
 8001aa6:	e000      	b.n	8001aaa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d063      	beq.n	8001b7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ab6:	4b4c      	ldr	r3, [pc, #304]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00b      	beq.n	8001ada <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ac2:	4b49      	ldr	r3, [pc, #292]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d11c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x18c>
 8001ace:	4b46      	ldr	r3, [pc, #280]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d116      	bne.n	8001b08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ada:	4b43      	ldr	r3, [pc, #268]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d005      	beq.n	8001af2 <HAL_RCC_OscConfig+0x176>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d001      	beq.n	8001af2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e1ba      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af2:	4b3d      	ldr	r3, [pc, #244]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	4939      	ldr	r1, [pc, #228]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b06:	e03a      	b.n	8001b7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d020      	beq.n	8001b52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b10:	4b36      	ldr	r3, [pc, #216]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b16:	f7ff fc97 	bl	8001448 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b1e:	f7ff fc93 	bl	8001448 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e19b      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b30:	4b2d      	ldr	r3, [pc, #180]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3c:	4b2a      	ldr	r3, [pc, #168]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	4927      	ldr	r1, [pc, #156]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	600b      	str	r3, [r1, #0]
 8001b50:	e015      	b.n	8001b7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b52:	4b26      	ldr	r3, [pc, #152]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7ff fc76 	bl	8001448 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b60:	f7ff fc72 	bl	8001448 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e17a      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b72:	4b1d      	ldr	r3, [pc, #116]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d03a      	beq.n	8001c00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d019      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b92:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <HAL_RCC_OscConfig+0x274>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b98:	f7ff fc56 	bl	8001448 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba0:	f7ff fc52 	bl	8001448 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e15a      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	f000 faa8 	bl	8002114 <RCC_Delay>
 8001bc4:	e01c      	b.n	8001c00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <HAL_RCC_OscConfig+0x274>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bcc:	f7ff fc3c 	bl	8001448 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd2:	e00f      	b.n	8001bf4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd4:	f7ff fc38 	bl	8001448 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d908      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e140      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
 8001be6:	bf00      	nop
 8001be8:	40021000 	.word	0x40021000
 8001bec:	42420000 	.word	0x42420000
 8001bf0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf4:	4b9e      	ldr	r3, [pc, #632]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1e9      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 80a6 	beq.w	8001d5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c12:	4b97      	ldr	r3, [pc, #604]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10d      	bne.n	8001c3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c1e:	4b94      	ldr	r3, [pc, #592]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	4a93      	ldr	r2, [pc, #588]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c28:	61d3      	str	r3, [r2, #28]
 8001c2a:	4b91      	ldr	r3, [pc, #580]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c36:	2301      	movs	r3, #1
 8001c38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3a:	4b8e      	ldr	r3, [pc, #568]	; (8001e74 <HAL_RCC_OscConfig+0x4f8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d118      	bne.n	8001c78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c46:	4b8b      	ldr	r3, [pc, #556]	; (8001e74 <HAL_RCC_OscConfig+0x4f8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a8a      	ldr	r2, [pc, #552]	; (8001e74 <HAL_RCC_OscConfig+0x4f8>)
 8001c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c52:	f7ff fbf9 	bl	8001448 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c5a:	f7ff fbf5 	bl	8001448 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b64      	cmp	r3, #100	; 0x64
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e0fd      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6c:	4b81      	ldr	r3, [pc, #516]	; (8001e74 <HAL_RCC_OscConfig+0x4f8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d106      	bne.n	8001c8e <HAL_RCC_OscConfig+0x312>
 8001c80:	4b7b      	ldr	r3, [pc, #492]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	4a7a      	ldr	r2, [pc, #488]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	6213      	str	r3, [r2, #32]
 8001c8c:	e02d      	b.n	8001cea <HAL_RCC_OscConfig+0x36e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x334>
 8001c96:	4b76      	ldr	r3, [pc, #472]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	4a75      	ldr	r2, [pc, #468]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001c9c:	f023 0301 	bic.w	r3, r3, #1
 8001ca0:	6213      	str	r3, [r2, #32]
 8001ca2:	4b73      	ldr	r3, [pc, #460]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	4a72      	ldr	r2, [pc, #456]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	f023 0304 	bic.w	r3, r3, #4
 8001cac:	6213      	str	r3, [r2, #32]
 8001cae:	e01c      	b.n	8001cea <HAL_RCC_OscConfig+0x36e>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	2b05      	cmp	r3, #5
 8001cb6:	d10c      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x356>
 8001cb8:	4b6d      	ldr	r3, [pc, #436]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	4a6c      	ldr	r2, [pc, #432]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001cbe:	f043 0304 	orr.w	r3, r3, #4
 8001cc2:	6213      	str	r3, [r2, #32]
 8001cc4:	4b6a      	ldr	r3, [pc, #424]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	4a69      	ldr	r2, [pc, #420]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	6213      	str	r3, [r2, #32]
 8001cd0:	e00b      	b.n	8001cea <HAL_RCC_OscConfig+0x36e>
 8001cd2:	4b67      	ldr	r3, [pc, #412]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	4a66      	ldr	r2, [pc, #408]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001cd8:	f023 0301 	bic.w	r3, r3, #1
 8001cdc:	6213      	str	r3, [r2, #32]
 8001cde:	4b64      	ldr	r3, [pc, #400]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	4a63      	ldr	r2, [pc, #396]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001ce4:	f023 0304 	bic.w	r3, r3, #4
 8001ce8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d015      	beq.n	8001d1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf2:	f7ff fba9 	bl	8001448 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf8:	e00a      	b.n	8001d10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfa:	f7ff fba5 	bl	8001448 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e0ab      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d10:	4b57      	ldr	r3, [pc, #348]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0ee      	beq.n	8001cfa <HAL_RCC_OscConfig+0x37e>
 8001d1c:	e014      	b.n	8001d48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1e:	f7ff fb93 	bl	8001448 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d24:	e00a      	b.n	8001d3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d26:	f7ff fb8f 	bl	8001448 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e095      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d3c:	4b4c      	ldr	r3, [pc, #304]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1ee      	bne.n	8001d26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d48:	7dfb      	ldrb	r3, [r7, #23]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d105      	bne.n	8001d5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d4e:	4b48      	ldr	r3, [pc, #288]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	4a47      	ldr	r2, [pc, #284]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001d54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 8081 	beq.w	8001e66 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d64:	4b42      	ldr	r3, [pc, #264]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d061      	beq.n	8001e34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d146      	bne.n	8001e06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d78:	4b3f      	ldr	r3, [pc, #252]	; (8001e78 <HAL_RCC_OscConfig+0x4fc>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7e:	f7ff fb63 	bl	8001448 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d86:	f7ff fb5f 	bl	8001448 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e067      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d98:	4b35      	ldr	r3, [pc, #212]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1f0      	bne.n	8001d86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dac:	d108      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dae:	4b30      	ldr	r3, [pc, #192]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	492d      	ldr	r1, [pc, #180]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc0:	4b2b      	ldr	r3, [pc, #172]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a19      	ldr	r1, [r3, #32]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	430b      	orrs	r3, r1
 8001dd2:	4927      	ldr	r1, [pc, #156]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dd8:	4b27      	ldr	r3, [pc, #156]	; (8001e78 <HAL_RCC_OscConfig+0x4fc>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dde:	f7ff fb33 	bl	8001448 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de6:	f7ff fb2f 	bl	8001448 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e037      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001df8:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCC_OscConfig+0x46a>
 8001e04:	e02f      	b.n	8001e66 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e06:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <HAL_RCC_OscConfig+0x4fc>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0c:	f7ff fb1c 	bl	8001448 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e14:	f7ff fb18 	bl	8001448 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e020      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e26:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x498>
 8001e32:	e018      	b.n	8001e66 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e013      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <HAL_RCC_OscConfig+0x4f4>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d106      	bne.n	8001e62 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d001      	beq.n	8001e66 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40007000 	.word	0x40007000
 8001e78:	42420060 	.word	0x42420060

08001e7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0d0      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e90:	4b6a      	ldr	r3, [pc, #424]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d910      	bls.n	8001ec0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9e:	4b67      	ldr	r3, [pc, #412]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f023 0207 	bic.w	r2, r3, #7
 8001ea6:	4965      	ldr	r1, [pc, #404]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eae:	4b63      	ldr	r3, [pc, #396]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d001      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0b8      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d020      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ed8:	4b59      	ldr	r3, [pc, #356]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	4a58      	ldr	r2, [pc, #352]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ee2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ef0:	4b53      	ldr	r3, [pc, #332]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	4a52      	ldr	r2, [pc, #328]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001efa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001efc:	4b50      	ldr	r3, [pc, #320]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	494d      	ldr	r1, [pc, #308]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d040      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d107      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	4b47      	ldr	r3, [pc, #284]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d115      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e07f      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d107      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3a:	4b41      	ldr	r3, [pc, #260]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d109      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e073      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4a:	4b3d      	ldr	r3, [pc, #244]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e06b      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f5a:	4b39      	ldr	r3, [pc, #228]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f023 0203 	bic.w	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4936      	ldr	r1, [pc, #216]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f6c:	f7ff fa6c 	bl	8001448 <HAL_GetTick>
 8001f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f72:	e00a      	b.n	8001f8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f74:	f7ff fa68 	bl	8001448 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e053      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8a:	4b2d      	ldr	r3, [pc, #180]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 020c 	and.w	r2, r3, #12
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d1eb      	bne.n	8001f74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f9c:	4b27      	ldr	r3, [pc, #156]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d210      	bcs.n	8001fcc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001faa:	4b24      	ldr	r3, [pc, #144]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 0207 	bic.w	r2, r3, #7
 8001fb2:	4922      	ldr	r1, [pc, #136]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fba:	4b20      	ldr	r3, [pc, #128]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e032      	b.n	8002032 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d008      	beq.n	8001fea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd8:	4b19      	ldr	r3, [pc, #100]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4916      	ldr	r1, [pc, #88]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d009      	beq.n	800200a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ff6:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	490e      	ldr	r1, [pc, #56]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	4313      	orrs	r3, r2
 8002008:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800200a:	f000 f821 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 800200e:	4601      	mov	r1, r0
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	4a0a      	ldr	r2, [pc, #40]	; (8002044 <HAL_RCC_ClockConfig+0x1c8>)
 800201c:	5cd3      	ldrb	r3, [r2, r3]
 800201e:	fa21 f303 	lsr.w	r3, r1, r3
 8002022:	4a09      	ldr	r2, [pc, #36]	; (8002048 <HAL_RCC_ClockConfig+0x1cc>)
 8002024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <HAL_RCC_ClockConfig+0x1d0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff f9ca 	bl	80013c4 <HAL_InitTick>

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40022000 	.word	0x40022000
 8002040:	40021000 	.word	0x40021000
 8002044:	08003f1c 	.word	0x08003f1c
 8002048:	20000000 	.word	0x20000000
 800204c:	20000004 	.word	0x20000004

08002050 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002050:	b490      	push	{r4, r7}
 8002052:	b08a      	sub	sp, #40	; 0x28
 8002054:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002056:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002058:	1d3c      	adds	r4, r7, #4
 800205a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800205c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002060:	4b28      	ldr	r3, [pc, #160]	; (8002104 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
 800206a:	2300      	movs	r3, #0
 800206c:	61bb      	str	r3, [r7, #24]
 800206e:	2300      	movs	r3, #0
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002076:	2300      	movs	r3, #0
 8002078:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800207a:	4b23      	ldr	r3, [pc, #140]	; (8002108 <HAL_RCC_GetSysClockFreq+0xb8>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f003 030c 	and.w	r3, r3, #12
 8002086:	2b04      	cmp	r3, #4
 8002088:	d002      	beq.n	8002090 <HAL_RCC_GetSysClockFreq+0x40>
 800208a:	2b08      	cmp	r3, #8
 800208c:	d003      	beq.n	8002096 <HAL_RCC_GetSysClockFreq+0x46>
 800208e:	e02d      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002090:	4b1e      	ldr	r3, [pc, #120]	; (800210c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002092:	623b      	str	r3, [r7, #32]
      break;
 8002094:	e02d      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	0c9b      	lsrs	r3, r3, #18
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020a2:	4413      	add	r3, r2
 80020a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020a8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d013      	beq.n	80020dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020b4:	4b14      	ldr	r3, [pc, #80]	; (8002108 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	0c5b      	lsrs	r3, r3, #17
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020c2:	4413      	add	r3, r2
 80020c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	4a0f      	ldr	r2, [pc, #60]	; (800210c <HAL_RCC_GetSysClockFreq+0xbc>)
 80020ce:	fb02 f203 	mul.w	r2, r2, r3
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
 80020da:	e004      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	4a0c      	ldr	r2, [pc, #48]	; (8002110 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020e0:	fb02 f303 	mul.w	r3, r2, r3
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	623b      	str	r3, [r7, #32]
      break;
 80020ea:	e002      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020ec:	4b07      	ldr	r3, [pc, #28]	; (800210c <HAL_RCC_GetSysClockFreq+0xbc>)
 80020ee:	623b      	str	r3, [r7, #32]
      break;
 80020f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020f2:	6a3b      	ldr	r3, [r7, #32]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3728      	adds	r7, #40	; 0x28
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc90      	pop	{r4, r7}
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	08003f08 	.word	0x08003f08
 8002104:	08003f18 	.word	0x08003f18
 8002108:	40021000 	.word	0x40021000
 800210c:	007a1200 	.word	0x007a1200
 8002110:	003d0900 	.word	0x003d0900

08002114 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800211c:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <RCC_Delay+0x34>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a0a      	ldr	r2, [pc, #40]	; (800214c <RCC_Delay+0x38>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	0a5b      	lsrs	r3, r3, #9
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	fb02 f303 	mul.w	r3, r2, r3
 800212e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002130:	bf00      	nop
  }
  while (Delay --);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	1e5a      	subs	r2, r3, #1
 8002136:	60fa      	str	r2, [r7, #12]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1f9      	bne.n	8002130 <RCC_Delay+0x1c>
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	20000000 	.word	0x20000000
 800214c:	10624dd3 	.word	0x10624dd3

08002150 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e01d      	b.n	800219e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d106      	bne.n	800217c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7fe fe74 	bl	8000e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2202      	movs	r2, #2
 8002180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3304      	adds	r3, #4
 800218c:	4619      	mov	r1, r3
 800218e:	4610      	mov	r0, r2
 8002190:	f000 f8e4 	bl	800235c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b085      	sub	sp, #20
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2202      	movs	r2, #2
 80021b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2b06      	cmp	r3, #6
 80021c6:	d007      	beq.n	80021d8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr

080021ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_TIM_ConfigClockSource+0x18>
 8002200:	2302      	movs	r3, #2
 8002202:	e0a6      	b.n	8002352 <HAL_TIM_ConfigClockSource+0x166>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002222:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800222a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b40      	cmp	r3, #64	; 0x40
 800223a:	d067      	beq.n	800230c <HAL_TIM_ConfigClockSource+0x120>
 800223c:	2b40      	cmp	r3, #64	; 0x40
 800223e:	d80b      	bhi.n	8002258 <HAL_TIM_ConfigClockSource+0x6c>
 8002240:	2b10      	cmp	r3, #16
 8002242:	d073      	beq.n	800232c <HAL_TIM_ConfigClockSource+0x140>
 8002244:	2b10      	cmp	r3, #16
 8002246:	d802      	bhi.n	800224e <HAL_TIM_ConfigClockSource+0x62>
 8002248:	2b00      	cmp	r3, #0
 800224a:	d06f      	beq.n	800232c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800224c:	e078      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800224e:	2b20      	cmp	r3, #32
 8002250:	d06c      	beq.n	800232c <HAL_TIM_ConfigClockSource+0x140>
 8002252:	2b30      	cmp	r3, #48	; 0x30
 8002254:	d06a      	beq.n	800232c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002256:	e073      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002258:	2b70      	cmp	r3, #112	; 0x70
 800225a:	d00d      	beq.n	8002278 <HAL_TIM_ConfigClockSource+0x8c>
 800225c:	2b70      	cmp	r3, #112	; 0x70
 800225e:	d804      	bhi.n	800226a <HAL_TIM_ConfigClockSource+0x7e>
 8002260:	2b50      	cmp	r3, #80	; 0x50
 8002262:	d033      	beq.n	80022cc <HAL_TIM_ConfigClockSource+0xe0>
 8002264:	2b60      	cmp	r3, #96	; 0x60
 8002266:	d041      	beq.n	80022ec <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002268:	e06a      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800226a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800226e:	d066      	beq.n	800233e <HAL_TIM_ConfigClockSource+0x152>
 8002270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002274:	d017      	beq.n	80022a6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002276:	e063      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	6899      	ldr	r1, [r3, #8]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f000 f941 	bl	800250e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800229a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	609a      	str	r2, [r3, #8]
      break;
 80022a4:	e04c      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6818      	ldr	r0, [r3, #0]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	6899      	ldr	r1, [r3, #8]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f000 f92a 	bl	800250e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022c8:	609a      	str	r2, [r3, #8]
      break;
 80022ca:	e039      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6818      	ldr	r0, [r3, #0]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	6859      	ldr	r1, [r3, #4]
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	461a      	mov	r2, r3
 80022da:	f000 f8a1 	bl	8002420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2150      	movs	r1, #80	; 0x50
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 f8f8 	bl	80024da <TIM_ITRx_SetConfig>
      break;
 80022ea:	e029      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6818      	ldr	r0, [r3, #0]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	6859      	ldr	r1, [r3, #4]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	461a      	mov	r2, r3
 80022fa:	f000 f8bf 	bl	800247c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2160      	movs	r1, #96	; 0x60
 8002304:	4618      	mov	r0, r3
 8002306:	f000 f8e8 	bl	80024da <TIM_ITRx_SetConfig>
      break;
 800230a:	e019      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6818      	ldr	r0, [r3, #0]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	6859      	ldr	r1, [r3, #4]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	461a      	mov	r2, r3
 800231a:	f000 f881 	bl	8002420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2140      	movs	r1, #64	; 0x40
 8002324:	4618      	mov	r0, r3
 8002326:	f000 f8d8 	bl	80024da <TIM_ITRx_SetConfig>
      break;
 800232a:	e009      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4619      	mov	r1, r3
 8002336:	4610      	mov	r0, r2
 8002338:	f000 f8cf 	bl	80024da <TIM_ITRx_SetConfig>
      break;
 800233c:	e000      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800233e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a29      	ldr	r2, [pc, #164]	; (8002414 <TIM_Base_SetConfig+0xb8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d00b      	beq.n	800238c <TIM_Base_SetConfig+0x30>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800237a:	d007      	beq.n	800238c <TIM_Base_SetConfig+0x30>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a26      	ldr	r2, [pc, #152]	; (8002418 <TIM_Base_SetConfig+0xbc>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d003      	beq.n	800238c <TIM_Base_SetConfig+0x30>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a25      	ldr	r2, [pc, #148]	; (800241c <TIM_Base_SetConfig+0xc0>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d108      	bne.n	800239e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	4313      	orrs	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a1c      	ldr	r2, [pc, #112]	; (8002414 <TIM_Base_SetConfig+0xb8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d00b      	beq.n	80023be <TIM_Base_SetConfig+0x62>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ac:	d007      	beq.n	80023be <TIM_Base_SetConfig+0x62>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a19      	ldr	r2, [pc, #100]	; (8002418 <TIM_Base_SetConfig+0xbc>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d003      	beq.n	80023be <TIM_Base_SetConfig+0x62>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a18      	ldr	r2, [pc, #96]	; (800241c <TIM_Base_SetConfig+0xc0>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d108      	bne.n	80023d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	4313      	orrs	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a07      	ldr	r2, [pc, #28]	; (8002414 <TIM_Base_SetConfig+0xb8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d103      	bne.n	8002404 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	615a      	str	r2, [r3, #20]
}
 800240a:	bf00      	nop
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr
 8002414:	40012c00 	.word	0x40012c00
 8002418:	40000400 	.word	0x40000400
 800241c:	40000800 	.word	0x40000800

08002420 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002420:	b480      	push	{r7}
 8002422:	b087      	sub	sp, #28
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	f023 0201 	bic.w	r2, r3, #1
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800244a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f023 030a 	bic.w	r3, r3, #10
 800245c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	4313      	orrs	r3, r2
 8002464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	621a      	str	r2, [r3, #32]
}
 8002472:	bf00      	nop
 8002474:	371c      	adds	r7, #28
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr

0800247c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800247c:	b480      	push	{r7}
 800247e:	b087      	sub	sp, #28
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	f023 0210 	bic.w	r2, r3, #16
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	031b      	lsls	r3, r3, #12
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	621a      	str	r2, [r3, #32]
}
 80024d0:	bf00      	nop
 80024d2:	371c      	adds	r7, #28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr

080024da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024da:	b480      	push	{r7}
 80024dc:	b085      	sub	sp, #20
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f043 0307 	orr.w	r3, r3, #7
 80024fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	609a      	str	r2, [r3, #8]
}
 8002504:	bf00      	nop
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr

0800250e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800250e:	b480      	push	{r7}
 8002510:	b087      	sub	sp, #28
 8002512:	af00      	add	r7, sp, #0
 8002514:	60f8      	str	r0, [r7, #12]
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	607a      	str	r2, [r7, #4]
 800251a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002528:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	021a      	lsls	r2, r3, #8
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	431a      	orrs	r2, r3
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	4313      	orrs	r3, r2
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	4313      	orrs	r3, r2
 800253a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	609a      	str	r2, [r3, #8]
}
 8002542:	bf00      	nop
 8002544:	371c      	adds	r7, #28
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002560:	2302      	movs	r3, #2
 8002562:	e032      	b.n	80025ca <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800258a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800259c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80025d4:	b490      	push	{r4, r7}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	461a      	mov	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	0e1b      	lsrs	r3, r3, #24
 80025e8:	4413      	add	r3, r2
 80025ea:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80025ec:	6822      	ldr	r2, [r4, #0]
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	fa93 f3a3 	rbit	r3, r3
 80025f8:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	fab3 f383 	clz	r3, r3
 8002600:	b2db      	uxtb	r3, r3
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	210f      	movs	r1, #15
 8002606:	fa01 f303 	lsl.w	r3, r1, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	401a      	ands	r2, r3
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	61bb      	str	r3, [r7, #24]
  return result;
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	fab3 f383 	clz	r3, r3
 8002620:	b2db      	uxtb	r3, r3
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	fa01 f303 	lsl.w	r3, r1, r3
 800262a:	4313      	orrs	r3, r2
 800262c:	6023      	str	r3, [r4, #0]
}
 800262e:	bf00      	nop
 8002630:	3720      	adds	r7, #32
 8002632:	46bd      	mov	sp, r7
 8002634:	bc90      	pop	{r4, r7}
 8002636:	4770      	bx	lr

08002638 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002638:	b490      	push	{r4, r7}
 800263a:	b088      	sub	sp, #32
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	461a      	mov	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	0e1b      	lsrs	r3, r3, #24
 800264c:	4413      	add	r3, r2
 800264e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8002650:	6822      	ldr	r2, [r4, #0]
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	fa93 f3a3 	rbit	r3, r3
 800265c:	613b      	str	r3, [r7, #16]
  return result;
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	fab3 f383 	clz	r3, r3
 8002664:	b2db      	uxtb	r3, r3
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	2103      	movs	r1, #3
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	401a      	ands	r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	fa93 f3a3 	rbit	r3, r3
 800267c:	61bb      	str	r3, [r7, #24]
  return result;
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	fab3 f383 	clz	r3, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	fa01 f303 	lsl.w	r3, r1, r3
 800268e:	4313      	orrs	r3, r2
 8002690:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 8002692:	bf00      	nop
 8002694:	3720      	adds	r7, #32
 8002696:	46bd      	mov	sp, r7
 8002698:	bc90      	pop	{r4, r7}
 800269a:	4770      	bx	lr

0800269c <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 800269c:	b490      	push	{r4, r7}
 800269e:	b088      	sub	sp, #32
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	461a      	mov	r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	0e1b      	lsrs	r3, r3, #24
 80026b0:	4413      	add	r3, r2
 80026b2:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80026b4:	6822      	ldr	r2, [r4, #0]
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	fa93 f3a3 	rbit	r3, r3
 80026c0:	613b      	str	r3, [r7, #16]
  return result;
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	fab3 f383 	clz	r3, r3
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	2104      	movs	r1, #4
 80026ce:	fa01 f303 	lsl.w	r3, r1, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	401a      	ands	r2, r3
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	61bb      	str	r3, [r7, #24]
  return result;
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	fab3 f383 	clz	r3, r3
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	fa01 f303 	lsl.w	r3, r1, r3
 80026f2:	4313      	orrs	r3, r2
 80026f4:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 80026f6:	bf00      	nop
 80026f8:	3720      	adds	r7, #32
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc90      	pop	{r4, r7}
 80026fe:	4770      	bx	lr

08002700 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002700:	b480      	push	{r7}
 8002702:	b087      	sub	sp, #28
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	0a1b      	lsrs	r3, r3, #8
 8002714:	43db      	mvns	r3, r3
 8002716:	401a      	ands	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	0a1b      	lsrs	r3, r3, #8
 800271c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	fa93 f3a3 	rbit	r3, r3
 8002724:	613b      	str	r3, [r7, #16]
  return result;
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	fab3 f383 	clz	r3, r3
 800272c:	b2db      	uxtb	r3, r3
 800272e:	4619      	mov	r1, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	408b      	lsls	r3, r1
 8002734:	431a      	orrs	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	60da      	str	r2, [r3, #12]
}
 800273a:	bf00      	nop
 800273c:	371c      	adds	r7, #28
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr

08002744 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	021b      	lsls	r3, r3, #8
 8002754:	0c1b      	lsrs	r3, r3, #16
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	fa93 f3a3 	rbit	r3, r3
 8002762:	60fb      	str	r3, [r7, #12]
  return result;
 8002764:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8002766:	fab3 f383 	clz	r3, r3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800276e:	e040      	b.n	80027f2 <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8002770:	2201      	movs	r2, #1
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	409a      	lsls	r2, r3
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	4013      	ands	r3, r2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d036      	beq.n	80027ec <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	2b07      	cmp	r3, #7
 8002782:	d806      	bhi.n	8002792 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8002784:	f240 1201 	movw	r2, #257	; 0x101
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	61bb      	str	r3, [r7, #24]
 8002790:	e008      	b.n	80027a4 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3b08      	subs	r3, #8
 8002796:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027a2:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	461a      	mov	r2, r3
 80027aa:	69b9      	ldr	r1, [r7, #24]
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f7ff ff11 	bl	80025d4 <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	461a      	mov	r2, r3
 80027b8:	69b9      	ldr	r1, [r7, #24]
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff ffa0 	bl	8002700 <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d003      	beq.n	80027d0 <LL_GPIO_Init+0x8c>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b09      	cmp	r3, #9
 80027ce:	d10d      	bne.n	80027ec <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	461a      	mov	r2, r3
 80027d6:	69b9      	ldr	r1, [r7, #24]
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff ff2d 	bl	8002638 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	461a      	mov	r2, r3
 80027e4:	69b9      	ldr	r1, [r7, #24]
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff ff58 	bl	800269c <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	3301      	adds	r3, #1
 80027f0:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	fa22 f303 	lsr.w	r3, r2, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1b8      	bne.n	8002770 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3720      	adds	r7, #32
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800280c:	4b03      	ldr	r3, [pc, #12]	; (800281c <LL_RCC_GetSysClkSource+0x14>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 030c 	and.w	r3, r3, #12
}
 8002814:	4618      	mov	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	40021000 	.word	0x40021000

08002820 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002824:	4b03      	ldr	r3, [pc, #12]	; (8002834 <LL_RCC_GetAHBPrescaler+0x14>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800282c:	4618      	mov	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr
 8002834:	40021000 	.word	0x40021000

08002838 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800283c:	4b03      	ldr	r3, [pc, #12]	; (800284c <LL_RCC_GetAPB1Prescaler+0x14>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr
 800284c:	40021000 	.word	0x40021000

08002850 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002854:	4b03      	ldr	r3, [pc, #12]	; (8002864 <LL_RCC_GetAPB2Prescaler+0x14>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800285c:	4618      	mov	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr
 8002864:	40021000 	.word	0x40021000

08002868 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800286c:	4b03      	ldr	r3, [pc, #12]	; (800287c <LL_RCC_PLL_GetMainSource+0x14>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8002874:	4618      	mov	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr
 800287c:	40021000 	.word	0x40021000

08002880 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 800288c:	4618      	mov	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr
 8002894:	40021000 	.word	0x40021000

08002898 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 800289c:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <LL_RCC_PLL_GetPrediv+0x18>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	0c5b      	lsrs	r3, r3, #17
 80028a2:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000

080028b4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80028bc:	f000 f820 	bl	8002900 <RCC_GetSystemClockFreq>
 80028c0:	4602      	mov	r2, r0
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 f83a 	bl	8002944 <RCC_GetHCLKClockFreq>
 80028d0:	4602      	mov	r2, r0
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 f848 	bl	8002970 <RCC_GetPCLK1ClockFreq>
 80028e0:	4602      	mov	r2, r0
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 f854 	bl	8002998 <RCC_GetPCLK2ClockFreq>
 80028f0:	4602      	mov	r2, r0
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	60da      	str	r2, [r3, #12]
}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
	...

08002900 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800290a:	f7ff ff7d 	bl	8002808 <LL_RCC_GetSysClkSource>
 800290e:	4603      	mov	r3, r0
 8002910:	2b04      	cmp	r3, #4
 8002912:	d006      	beq.n	8002922 <RCC_GetSystemClockFreq+0x22>
 8002914:	2b08      	cmp	r3, #8
 8002916:	d007      	beq.n	8002928 <RCC_GetSystemClockFreq+0x28>
 8002918:	2b00      	cmp	r3, #0
 800291a:	d109      	bne.n	8002930 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800291c:	4b08      	ldr	r3, [pc, #32]	; (8002940 <RCC_GetSystemClockFreq+0x40>)
 800291e:	607b      	str	r3, [r7, #4]
      break;
 8002920:	e009      	b.n	8002936 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002922:	4b07      	ldr	r3, [pc, #28]	; (8002940 <RCC_GetSystemClockFreq+0x40>)
 8002924:	607b      	str	r3, [r7, #4]
      break;
 8002926:	e006      	b.n	8002936 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002928:	f000 f84a 	bl	80029c0 <RCC_PLL_GetFreqDomain_SYS>
 800292c:	6078      	str	r0, [r7, #4]
      break;
 800292e:	e002      	b.n	8002936 <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8002930:	4b03      	ldr	r3, [pc, #12]	; (8002940 <RCC_GetSystemClockFreq+0x40>)
 8002932:	607b      	str	r3, [r7, #4]
      break;
 8002934:	bf00      	nop
  }

  return frequency;
 8002936:	687b      	ldr	r3, [r7, #4]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	007a1200 	.word	0x007a1200

08002944 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800294c:	f7ff ff68 	bl	8002820 <LL_RCC_GetAHBPrescaler>
 8002950:	4603      	mov	r3, r0
 8002952:	091b      	lsrs	r3, r3, #4
 8002954:	f003 030f 	and.w	r3, r3, #15
 8002958:	4a04      	ldr	r2, [pc, #16]	; (800296c <RCC_GetHCLKClockFreq+0x28>)
 800295a:	5cd3      	ldrb	r3, [r2, r3]
 800295c:	461a      	mov	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	40d3      	lsrs	r3, r2
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	08003f1c 	.word	0x08003f1c

08002970 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002978:	f7ff ff5e 	bl	8002838 <LL_RCC_GetAPB1Prescaler>
 800297c:	4603      	mov	r3, r0
 800297e:	0a1b      	lsrs	r3, r3, #8
 8002980:	4a04      	ldr	r2, [pc, #16]	; (8002994 <RCC_GetPCLK1ClockFreq+0x24>)
 8002982:	5cd3      	ldrb	r3, [r2, r3]
 8002984:	461a      	mov	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	40d3      	lsrs	r3, r2
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	08003f2c 	.word	0x08003f2c

08002998 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80029a0:	f7ff ff56 	bl	8002850 <LL_RCC_GetAPB2Prescaler>
 80029a4:	4603      	mov	r3, r0
 80029a6:	0adb      	lsrs	r3, r3, #11
 80029a8:	4a04      	ldr	r2, [pc, #16]	; (80029bc <RCC_GetPCLK2ClockFreq+0x24>)
 80029aa:	5cd3      	ldrb	r3, [r2, r3]
 80029ac:	461a      	mov	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	40d3      	lsrs	r3, r2
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	08003f2c 	.word	0x08003f2c

080029c0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	607b      	str	r3, [r7, #4]
 80029ca:	2300      	movs	r3, #0
 80029cc:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80029ce:	f7ff ff4b 	bl	8002868 <LL_RCC_PLL_GetMainSource>
 80029d2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <RCC_PLL_GetFreqDomain_SYS+0x22>
 80029da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029de:	d003      	beq.n	80029e8 <RCC_PLL_GetFreqDomain_SYS+0x28>
 80029e0:	e00b      	b.n	80029fa <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80029e2:	4b0d      	ldr	r3, [pc, #52]	; (8002a18 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 80029e4:	607b      	str	r3, [r7, #4]
      break;
 80029e6:	e00b      	b.n	8002a00 <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80029e8:	f7ff ff56 	bl	8002898 <LL_RCC_PLL_GetPrediv>
 80029ec:	4603      	mov	r3, r0
 80029ee:	3301      	adds	r3, #1
 80029f0:	4a0a      	ldr	r2, [pc, #40]	; (8002a1c <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80029f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f6:	607b      	str	r3, [r7, #4]
      break;
 80029f8:	e002      	b.n	8002a00 <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80029fa:	4b07      	ldr	r3, [pc, #28]	; (8002a18 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 80029fc:	607b      	str	r3, [r7, #4]
      break;
 80029fe:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8002a00:	f7ff ff3e 	bl	8002880 <LL_RCC_PLL_GetMultiplicator>
 8002a04:	4603      	mov	r3, r0
 8002a06:	0c9b      	lsrs	r3, r3, #18
 8002a08:	3302      	adds	r3, #2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	fb02 f303 	mul.w	r3, r2, r3
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	003d0900 	.word	0x003d0900
 8002a1c:	007a1200 	.word	0x007a1200

08002a20 <LL_USART_IsEnabled>:
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a34:	bf0c      	ite	eq
 8002a36:	2301      	moveq	r3, #1
 8002a38:	2300      	movne	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr

08002a46 <LL_USART_SetStopBitsLength>:
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	611a      	str	r2, [r3, #16]
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr

08002a6a <LL_USART_SetHWFlowCtrl>:
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	615a      	str	r2, [r3, #20]
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr
	...

08002a90 <LL_USART_SetBaudRate>:
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009a      	lsls	r2, r3, #2
 8002aa6:	441a      	add	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab0:	4a25      	ldr	r2, [pc, #148]	; (8002b48 <LL_USART_SetBaudRate+0xb8>)
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	b299      	uxth	r1, r3
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009a      	lsls	r2, r3, #2
 8002ac8:	441a      	add	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ad2:	4b1d      	ldr	r3, [pc, #116]	; (8002b48 <LL_USART_SetBaudRate+0xb8>)
 8002ad4:	fba3 0302 	umull	r0, r3, r3, r2
 8002ad8:	095b      	lsrs	r3, r3, #5
 8002ada:	2064      	movs	r0, #100	; 0x64
 8002adc:	fb00 f303 	mul.w	r3, r0, r3
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	3332      	adds	r3, #50	; 0x32
 8002ae6:	4a18      	ldr	r2, [pc, #96]	; (8002b48 <LL_USART_SetBaudRate+0xb8>)
 8002ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aec:	095b      	lsrs	r3, r3, #5
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	440b      	add	r3, r1
 8002af8:	b299      	uxth	r1, r3
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	009a      	lsls	r2, r3, #2
 8002b04:	441a      	add	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b0e:	4b0e      	ldr	r3, [pc, #56]	; (8002b48 <LL_USART_SetBaudRate+0xb8>)
 8002b10:	fba3 0302 	umull	r0, r3, r3, r2
 8002b14:	095b      	lsrs	r3, r3, #5
 8002b16:	2064      	movs	r0, #100	; 0x64
 8002b18:	fb00 f303 	mul.w	r3, r0, r3
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	3332      	adds	r3, #50	; 0x32
 8002b22:	4a09      	ldr	r2, [pc, #36]	; (8002b48 <LL_USART_SetBaudRate+0xb8>)
 8002b24:	fba2 2303 	umull	r2, r3, r2, r3
 8002b28:	095b      	lsrs	r3, r3, #5
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	f003 030f 	and.w	r3, r3, #15
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	440b      	add	r3, r1
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	461a      	mov	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	609a      	str	r2, [r3, #8]
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	51eb851f 	.word	0x51eb851f

08002b4c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff ff5e 	bl	8002a20 <LL_USART_IsEnabled>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d145      	bne.n	8002bf6 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b72:	f023 030c 	bic.w	r3, r3, #12
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	6851      	ldr	r1, [r2, #4]
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	68d2      	ldr	r2, [r2, #12]
 8002b7e:	4311      	orrs	r1, r2
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	6912      	ldr	r2, [r2, #16]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	4619      	mov	r1, r3
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff ff57 	bl	8002a46 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff ff63 	bl	8002a6a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002ba4:	f107 0308 	add.w	r3, r7, #8
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fe83 	bl	80028b4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a13      	ldr	r2, [pc, #76]	; (8002c00 <LL_USART_Init+0xb4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d102      	bne.n	8002bbc <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	61bb      	str	r3, [r7, #24]
 8002bba:	e00c      	b.n	8002bd6 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a11      	ldr	r2, [pc, #68]	; (8002c04 <LL_USART_Init+0xb8>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d102      	bne.n	8002bca <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	61bb      	str	r3, [r7, #24]
 8002bc8:	e005      	b.n	8002bd6 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a0e      	ldr	r2, [pc, #56]	; (8002c08 <LL_USART_Init+0xbc>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d101      	bne.n	8002bd6 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00c      	beq.n	8002bf6 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d008      	beq.n	8002bf6 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8002be4:	2300      	movs	r3, #0
 8002be6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	69b9      	ldr	r1, [r7, #24]
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff ff4d 	bl	8002a90 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002bf6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3720      	adds	r7, #32
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40013800 	.word	0x40013800
 8002c04:	40004400 	.word	0x40004400
 8002c08:	40004800 	.word	0x40004800

08002c0c <getUltrasonicTime>:
#include "hcsr04.h"

uint32_t pin_timer;

uint32_t getUltrasonicTime(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
    pin_timer  = 0;
 8002c10:	4b1c      	ldr	r3, [pc, #112]	; (8002c84 <getUltrasonicTime+0x78>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(TRIGGER_PORT, TRIGGER_PIN, RESET);
 8002c16:	2200      	movs	r2, #0
 8002c18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c1c:	481a      	ldr	r0, [pc, #104]	; (8002c88 <getUltrasonicTime+0x7c>)
 8002c1e:	f7fe fe94 	bl	800194a <HAL_GPIO_WritePin>
    delayMicroseconds(5);
 8002c22:	2005      	movs	r0, #5
 8002c24:	f7fd ff7e 	bl	8000b24 <delayMicroseconds>
    HAL_GPIO_WritePin(TRIGGER_PORT, TRIGGER_PIN, SET);
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c2e:	4816      	ldr	r0, [pc, #88]	; (8002c88 <getUltrasonicTime+0x7c>)
 8002c30:	f7fe fe8b 	bl	800194a <HAL_GPIO_WritePin>
    delayMicroseconds(10);
 8002c34:	200a      	movs	r0, #10
 8002c36:	f7fd ff75 	bl	8000b24 <delayMicroseconds>
    HAL_GPIO_WritePin(TRIGGER_PORT, TRIGGER_PIN, RESET);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c40:	4811      	ldr	r0, [pc, #68]	; (8002c88 <getUltrasonicTime+0x7c>)
 8002c42:	f7fe fe82 	bl	800194a <HAL_GPIO_WritePin>

    while(!(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)));
 8002c46:	bf00      	nop
 8002c48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c4c:	480e      	ldr	r0, [pc, #56]	; (8002c88 <getUltrasonicTime+0x7c>)
 8002c4e:	f7fe fe65 	bl	800191c <HAL_GPIO_ReadPin>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0f7      	beq.n	8002c48 <getUltrasonicTime+0x3c>
    while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN))
 8002c58:	e007      	b.n	8002c6a <getUltrasonicTime+0x5e>
    {
        pin_timer++;
 8002c5a:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <getUltrasonicTime+0x78>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	4a08      	ldr	r2, [pc, #32]	; (8002c84 <getUltrasonicTime+0x78>)
 8002c62:	6013      	str	r3, [r2, #0]
        delayMicroseconds(1);
 8002c64:	2001      	movs	r0, #1
 8002c66:	f7fd ff5d 	bl	8000b24 <delayMicroseconds>
    while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN))
 8002c6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c6e:	4806      	ldr	r0, [pc, #24]	; (8002c88 <getUltrasonicTime+0x7c>)
 8002c70:	f7fe fe54 	bl	800191c <HAL_GPIO_ReadPin>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1ef      	bne.n	8002c5a <getUltrasonicTime+0x4e>
    }
    return pin_timer;
 8002c7a:	4b02      	ldr	r3, [pc, #8]	; (8002c84 <getUltrasonicTime+0x78>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	200003cc 	.word	0x200003cc
 8002c88:	40010c00 	.word	0x40010c00
 8002c8c:	00000000 	.word	0x00000000

08002c90 <getDistance>:

uint32_t getDistance(uint32_t pin_time)
{
 8002c90:	b590      	push	{r4, r7, lr}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
    return ((pin_time ) * (.034));
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7fd fb9b 	bl	80003d4 <__aeabi_ui2d>
 8002c9e:	a308      	add	r3, pc, #32	; (adr r3, 8002cc0 <getDistance+0x30>)
 8002ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca4:	f7fd fc10 	bl	80004c8 <__aeabi_dmul>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	460c      	mov	r4, r1
 8002cac:	4618      	mov	r0, r3
 8002cae:	4621      	mov	r1, r4
 8002cb0:	f7fd fe1c 	bl	80008ec <__aeabi_d2uiz>
 8002cb4:	4603      	mov	r3, r0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd90      	pop	{r4, r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	b020c49c 	.word	0xb020c49c
 8002cc4:	3fa16872 	.word	0x3fa16872

08002cc8 <__errno>:
 8002cc8:	4b01      	ldr	r3, [pc, #4]	; (8002cd0 <__errno+0x8>)
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	2000000c 	.word	0x2000000c

08002cd4 <__libc_init_array>:
 8002cd4:	b570      	push	{r4, r5, r6, lr}
 8002cd6:	2500      	movs	r5, #0
 8002cd8:	4e0c      	ldr	r6, [pc, #48]	; (8002d0c <__libc_init_array+0x38>)
 8002cda:	4c0d      	ldr	r4, [pc, #52]	; (8002d10 <__libc_init_array+0x3c>)
 8002cdc:	1ba4      	subs	r4, r4, r6
 8002cde:	10a4      	asrs	r4, r4, #2
 8002ce0:	42a5      	cmp	r5, r4
 8002ce2:	d109      	bne.n	8002cf8 <__libc_init_array+0x24>
 8002ce4:	f001 f8e8 	bl	8003eb8 <_init>
 8002ce8:	2500      	movs	r5, #0
 8002cea:	4e0a      	ldr	r6, [pc, #40]	; (8002d14 <__libc_init_array+0x40>)
 8002cec:	4c0a      	ldr	r4, [pc, #40]	; (8002d18 <__libc_init_array+0x44>)
 8002cee:	1ba4      	subs	r4, r4, r6
 8002cf0:	10a4      	asrs	r4, r4, #2
 8002cf2:	42a5      	cmp	r5, r4
 8002cf4:	d105      	bne.n	8002d02 <__libc_init_array+0x2e>
 8002cf6:	bd70      	pop	{r4, r5, r6, pc}
 8002cf8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cfc:	4798      	blx	r3
 8002cfe:	3501      	adds	r5, #1
 8002d00:	e7ee      	b.n	8002ce0 <__libc_init_array+0xc>
 8002d02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d06:	4798      	blx	r3
 8002d08:	3501      	adds	r5, #1
 8002d0a:	e7f2      	b.n	8002cf2 <__libc_init_array+0x1e>
 8002d0c:	08003fcc 	.word	0x08003fcc
 8002d10:	08003fcc 	.word	0x08003fcc
 8002d14:	08003fcc 	.word	0x08003fcc
 8002d18:	08003fd0 	.word	0x08003fd0

08002d1c <memset>:
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	4402      	add	r2, r0
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d100      	bne.n	8002d26 <memset+0xa>
 8002d24:	4770      	bx	lr
 8002d26:	f803 1b01 	strb.w	r1, [r3], #1
 8002d2a:	e7f9      	b.n	8002d20 <memset+0x4>

08002d2c <iprintf>:
 8002d2c:	b40f      	push	{r0, r1, r2, r3}
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <iprintf+0x2c>)
 8002d30:	b513      	push	{r0, r1, r4, lr}
 8002d32:	681c      	ldr	r4, [r3, #0]
 8002d34:	b124      	cbz	r4, 8002d40 <iprintf+0x14>
 8002d36:	69a3      	ldr	r3, [r4, #24]
 8002d38:	b913      	cbnz	r3, 8002d40 <iprintf+0x14>
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	f000 f882 	bl	8002e44 <__sinit>
 8002d40:	ab05      	add	r3, sp, #20
 8002d42:	9a04      	ldr	r2, [sp, #16]
 8002d44:	68a1      	ldr	r1, [r4, #8]
 8002d46:	4620      	mov	r0, r4
 8002d48:	9301      	str	r3, [sp, #4]
 8002d4a:	f000 fad9 	bl	8003300 <_vfiprintf_r>
 8002d4e:	b002      	add	sp, #8
 8002d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d54:	b004      	add	sp, #16
 8002d56:	4770      	bx	lr
 8002d58:	2000000c 	.word	0x2000000c

08002d5c <sniprintf>:
 8002d5c:	b40c      	push	{r2, r3}
 8002d5e:	b530      	push	{r4, r5, lr}
 8002d60:	4b17      	ldr	r3, [pc, #92]	; (8002dc0 <sniprintf+0x64>)
 8002d62:	1e0c      	subs	r4, r1, #0
 8002d64:	b09d      	sub	sp, #116	; 0x74
 8002d66:	681d      	ldr	r5, [r3, #0]
 8002d68:	da08      	bge.n	8002d7c <sniprintf+0x20>
 8002d6a:	238b      	movs	r3, #139	; 0x8b
 8002d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d70:	602b      	str	r3, [r5, #0]
 8002d72:	b01d      	add	sp, #116	; 0x74
 8002d74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d78:	b002      	add	sp, #8
 8002d7a:	4770      	bx	lr
 8002d7c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002d80:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002d84:	bf0c      	ite	eq
 8002d86:	4623      	moveq	r3, r4
 8002d88:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8002d8c:	9304      	str	r3, [sp, #16]
 8002d8e:	9307      	str	r3, [sp, #28]
 8002d90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d94:	9002      	str	r0, [sp, #8]
 8002d96:	9006      	str	r0, [sp, #24]
 8002d98:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002d9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002d9e:	ab21      	add	r3, sp, #132	; 0x84
 8002da0:	a902      	add	r1, sp, #8
 8002da2:	4628      	mov	r0, r5
 8002da4:	9301      	str	r3, [sp, #4]
 8002da6:	f000 f98b 	bl	80030c0 <_svfiprintf_r>
 8002daa:	1c43      	adds	r3, r0, #1
 8002dac:	bfbc      	itt	lt
 8002dae:	238b      	movlt	r3, #139	; 0x8b
 8002db0:	602b      	strlt	r3, [r5, #0]
 8002db2:	2c00      	cmp	r4, #0
 8002db4:	d0dd      	beq.n	8002d72 <sniprintf+0x16>
 8002db6:	2200      	movs	r2, #0
 8002db8:	9b02      	ldr	r3, [sp, #8]
 8002dba:	701a      	strb	r2, [r3, #0]
 8002dbc:	e7d9      	b.n	8002d72 <sniprintf+0x16>
 8002dbe:	bf00      	nop
 8002dc0:	2000000c 	.word	0x2000000c

08002dc4 <std>:
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	b510      	push	{r4, lr}
 8002dc8:	4604      	mov	r4, r0
 8002dca:	e9c0 3300 	strd	r3, r3, [r0]
 8002dce:	6083      	str	r3, [r0, #8]
 8002dd0:	8181      	strh	r1, [r0, #12]
 8002dd2:	6643      	str	r3, [r0, #100]	; 0x64
 8002dd4:	81c2      	strh	r2, [r0, #14]
 8002dd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002dda:	6183      	str	r3, [r0, #24]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	2208      	movs	r2, #8
 8002de0:	305c      	adds	r0, #92	; 0x5c
 8002de2:	f7ff ff9b 	bl	8002d1c <memset>
 8002de6:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <std+0x38>)
 8002de8:	6224      	str	r4, [r4, #32]
 8002dea:	6263      	str	r3, [r4, #36]	; 0x24
 8002dec:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <std+0x3c>)
 8002dee:	62a3      	str	r3, [r4, #40]	; 0x28
 8002df0:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <std+0x40>)
 8002df2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002df4:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <std+0x44>)
 8002df6:	6323      	str	r3, [r4, #48]	; 0x30
 8002df8:	bd10      	pop	{r4, pc}
 8002dfa:	bf00      	nop
 8002dfc:	0800385d 	.word	0x0800385d
 8002e00:	0800387f 	.word	0x0800387f
 8002e04:	080038b7 	.word	0x080038b7
 8002e08:	080038db 	.word	0x080038db

08002e0c <_cleanup_r>:
 8002e0c:	4901      	ldr	r1, [pc, #4]	; (8002e14 <_cleanup_r+0x8>)
 8002e0e:	f000 b885 	b.w	8002f1c <_fwalk_reent>
 8002e12:	bf00      	nop
 8002e14:	08003bb5 	.word	0x08003bb5

08002e18 <__sfmoreglue>:
 8002e18:	b570      	push	{r4, r5, r6, lr}
 8002e1a:	2568      	movs	r5, #104	; 0x68
 8002e1c:	1e4a      	subs	r2, r1, #1
 8002e1e:	4355      	muls	r5, r2
 8002e20:	460e      	mov	r6, r1
 8002e22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002e26:	f000 f897 	bl	8002f58 <_malloc_r>
 8002e2a:	4604      	mov	r4, r0
 8002e2c:	b140      	cbz	r0, 8002e40 <__sfmoreglue+0x28>
 8002e2e:	2100      	movs	r1, #0
 8002e30:	e9c0 1600 	strd	r1, r6, [r0]
 8002e34:	300c      	adds	r0, #12
 8002e36:	60a0      	str	r0, [r4, #8]
 8002e38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002e3c:	f7ff ff6e 	bl	8002d1c <memset>
 8002e40:	4620      	mov	r0, r4
 8002e42:	bd70      	pop	{r4, r5, r6, pc}

08002e44 <__sinit>:
 8002e44:	6983      	ldr	r3, [r0, #24]
 8002e46:	b510      	push	{r4, lr}
 8002e48:	4604      	mov	r4, r0
 8002e4a:	bb33      	cbnz	r3, 8002e9a <__sinit+0x56>
 8002e4c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002e50:	6503      	str	r3, [r0, #80]	; 0x50
 8002e52:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <__sinit+0x58>)
 8002e54:	4a12      	ldr	r2, [pc, #72]	; (8002ea0 <__sinit+0x5c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6282      	str	r2, [r0, #40]	; 0x28
 8002e5a:	4298      	cmp	r0, r3
 8002e5c:	bf04      	itt	eq
 8002e5e:	2301      	moveq	r3, #1
 8002e60:	6183      	streq	r3, [r0, #24]
 8002e62:	f000 f81f 	bl	8002ea4 <__sfp>
 8002e66:	6060      	str	r0, [r4, #4]
 8002e68:	4620      	mov	r0, r4
 8002e6a:	f000 f81b 	bl	8002ea4 <__sfp>
 8002e6e:	60a0      	str	r0, [r4, #8]
 8002e70:	4620      	mov	r0, r4
 8002e72:	f000 f817 	bl	8002ea4 <__sfp>
 8002e76:	2200      	movs	r2, #0
 8002e78:	60e0      	str	r0, [r4, #12]
 8002e7a:	2104      	movs	r1, #4
 8002e7c:	6860      	ldr	r0, [r4, #4]
 8002e7e:	f7ff ffa1 	bl	8002dc4 <std>
 8002e82:	2201      	movs	r2, #1
 8002e84:	2109      	movs	r1, #9
 8002e86:	68a0      	ldr	r0, [r4, #8]
 8002e88:	f7ff ff9c 	bl	8002dc4 <std>
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	2112      	movs	r1, #18
 8002e90:	68e0      	ldr	r0, [r4, #12]
 8002e92:	f7ff ff97 	bl	8002dc4 <std>
 8002e96:	2301      	movs	r3, #1
 8002e98:	61a3      	str	r3, [r4, #24]
 8002e9a:	bd10      	pop	{r4, pc}
 8002e9c:	08003f34 	.word	0x08003f34
 8002ea0:	08002e0d 	.word	0x08002e0d

08002ea4 <__sfp>:
 8002ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea6:	4b1b      	ldr	r3, [pc, #108]	; (8002f14 <__sfp+0x70>)
 8002ea8:	4607      	mov	r7, r0
 8002eaa:	681e      	ldr	r6, [r3, #0]
 8002eac:	69b3      	ldr	r3, [r6, #24]
 8002eae:	b913      	cbnz	r3, 8002eb6 <__sfp+0x12>
 8002eb0:	4630      	mov	r0, r6
 8002eb2:	f7ff ffc7 	bl	8002e44 <__sinit>
 8002eb6:	3648      	adds	r6, #72	; 0x48
 8002eb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	d503      	bpl.n	8002ec8 <__sfp+0x24>
 8002ec0:	6833      	ldr	r3, [r6, #0]
 8002ec2:	b133      	cbz	r3, 8002ed2 <__sfp+0x2e>
 8002ec4:	6836      	ldr	r6, [r6, #0]
 8002ec6:	e7f7      	b.n	8002eb8 <__sfp+0x14>
 8002ec8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002ecc:	b16d      	cbz	r5, 8002eea <__sfp+0x46>
 8002ece:	3468      	adds	r4, #104	; 0x68
 8002ed0:	e7f4      	b.n	8002ebc <__sfp+0x18>
 8002ed2:	2104      	movs	r1, #4
 8002ed4:	4638      	mov	r0, r7
 8002ed6:	f7ff ff9f 	bl	8002e18 <__sfmoreglue>
 8002eda:	6030      	str	r0, [r6, #0]
 8002edc:	2800      	cmp	r0, #0
 8002ede:	d1f1      	bne.n	8002ec4 <__sfp+0x20>
 8002ee0:	230c      	movs	r3, #12
 8002ee2:	4604      	mov	r4, r0
 8002ee4:	603b      	str	r3, [r7, #0]
 8002ee6:	4620      	mov	r0, r4
 8002ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002eea:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <__sfp+0x74>)
 8002eec:	6665      	str	r5, [r4, #100]	; 0x64
 8002eee:	e9c4 5500 	strd	r5, r5, [r4]
 8002ef2:	60a5      	str	r5, [r4, #8]
 8002ef4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002ef8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002efc:	2208      	movs	r2, #8
 8002efe:	4629      	mov	r1, r5
 8002f00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002f04:	f7ff ff0a 	bl	8002d1c <memset>
 8002f08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002f0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002f10:	e7e9      	b.n	8002ee6 <__sfp+0x42>
 8002f12:	bf00      	nop
 8002f14:	08003f34 	.word	0x08003f34
 8002f18:	ffff0001 	.word	0xffff0001

08002f1c <_fwalk_reent>:
 8002f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f20:	4680      	mov	r8, r0
 8002f22:	4689      	mov	r9, r1
 8002f24:	2600      	movs	r6, #0
 8002f26:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002f2a:	b914      	cbnz	r4, 8002f32 <_fwalk_reent+0x16>
 8002f2c:	4630      	mov	r0, r6
 8002f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f32:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002f36:	3f01      	subs	r7, #1
 8002f38:	d501      	bpl.n	8002f3e <_fwalk_reent+0x22>
 8002f3a:	6824      	ldr	r4, [r4, #0]
 8002f3c:	e7f5      	b.n	8002f2a <_fwalk_reent+0xe>
 8002f3e:	89ab      	ldrh	r3, [r5, #12]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d907      	bls.n	8002f54 <_fwalk_reent+0x38>
 8002f44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	d003      	beq.n	8002f54 <_fwalk_reent+0x38>
 8002f4c:	4629      	mov	r1, r5
 8002f4e:	4640      	mov	r0, r8
 8002f50:	47c8      	blx	r9
 8002f52:	4306      	orrs	r6, r0
 8002f54:	3568      	adds	r5, #104	; 0x68
 8002f56:	e7ee      	b.n	8002f36 <_fwalk_reent+0x1a>

08002f58 <_malloc_r>:
 8002f58:	b570      	push	{r4, r5, r6, lr}
 8002f5a:	1ccd      	adds	r5, r1, #3
 8002f5c:	f025 0503 	bic.w	r5, r5, #3
 8002f60:	3508      	adds	r5, #8
 8002f62:	2d0c      	cmp	r5, #12
 8002f64:	bf38      	it	cc
 8002f66:	250c      	movcc	r5, #12
 8002f68:	2d00      	cmp	r5, #0
 8002f6a:	4606      	mov	r6, r0
 8002f6c:	db01      	blt.n	8002f72 <_malloc_r+0x1a>
 8002f6e:	42a9      	cmp	r1, r5
 8002f70:	d903      	bls.n	8002f7a <_malloc_r+0x22>
 8002f72:	230c      	movs	r3, #12
 8002f74:	6033      	str	r3, [r6, #0]
 8002f76:	2000      	movs	r0, #0
 8002f78:	bd70      	pop	{r4, r5, r6, pc}
 8002f7a:	f000 feed 	bl	8003d58 <__malloc_lock>
 8002f7e:	4a21      	ldr	r2, [pc, #132]	; (8003004 <_malloc_r+0xac>)
 8002f80:	6814      	ldr	r4, [r2, #0]
 8002f82:	4621      	mov	r1, r4
 8002f84:	b991      	cbnz	r1, 8002fac <_malloc_r+0x54>
 8002f86:	4c20      	ldr	r4, [pc, #128]	; (8003008 <_malloc_r+0xb0>)
 8002f88:	6823      	ldr	r3, [r4, #0]
 8002f8a:	b91b      	cbnz	r3, 8002f94 <_malloc_r+0x3c>
 8002f8c:	4630      	mov	r0, r6
 8002f8e:	f000 fc55 	bl	800383c <_sbrk_r>
 8002f92:	6020      	str	r0, [r4, #0]
 8002f94:	4629      	mov	r1, r5
 8002f96:	4630      	mov	r0, r6
 8002f98:	f000 fc50 	bl	800383c <_sbrk_r>
 8002f9c:	1c43      	adds	r3, r0, #1
 8002f9e:	d124      	bne.n	8002fea <_malloc_r+0x92>
 8002fa0:	230c      	movs	r3, #12
 8002fa2:	4630      	mov	r0, r6
 8002fa4:	6033      	str	r3, [r6, #0]
 8002fa6:	f000 fed8 	bl	8003d5a <__malloc_unlock>
 8002faa:	e7e4      	b.n	8002f76 <_malloc_r+0x1e>
 8002fac:	680b      	ldr	r3, [r1, #0]
 8002fae:	1b5b      	subs	r3, r3, r5
 8002fb0:	d418      	bmi.n	8002fe4 <_malloc_r+0x8c>
 8002fb2:	2b0b      	cmp	r3, #11
 8002fb4:	d90f      	bls.n	8002fd6 <_malloc_r+0x7e>
 8002fb6:	600b      	str	r3, [r1, #0]
 8002fb8:	18cc      	adds	r4, r1, r3
 8002fba:	50cd      	str	r5, [r1, r3]
 8002fbc:	4630      	mov	r0, r6
 8002fbe:	f000 fecc 	bl	8003d5a <__malloc_unlock>
 8002fc2:	f104 000b 	add.w	r0, r4, #11
 8002fc6:	1d23      	adds	r3, r4, #4
 8002fc8:	f020 0007 	bic.w	r0, r0, #7
 8002fcc:	1ac3      	subs	r3, r0, r3
 8002fce:	d0d3      	beq.n	8002f78 <_malloc_r+0x20>
 8002fd0:	425a      	negs	r2, r3
 8002fd2:	50e2      	str	r2, [r4, r3]
 8002fd4:	e7d0      	b.n	8002f78 <_malloc_r+0x20>
 8002fd6:	684b      	ldr	r3, [r1, #4]
 8002fd8:	428c      	cmp	r4, r1
 8002fda:	bf16      	itet	ne
 8002fdc:	6063      	strne	r3, [r4, #4]
 8002fde:	6013      	streq	r3, [r2, #0]
 8002fe0:	460c      	movne	r4, r1
 8002fe2:	e7eb      	b.n	8002fbc <_malloc_r+0x64>
 8002fe4:	460c      	mov	r4, r1
 8002fe6:	6849      	ldr	r1, [r1, #4]
 8002fe8:	e7cc      	b.n	8002f84 <_malloc_r+0x2c>
 8002fea:	1cc4      	adds	r4, r0, #3
 8002fec:	f024 0403 	bic.w	r4, r4, #3
 8002ff0:	42a0      	cmp	r0, r4
 8002ff2:	d005      	beq.n	8003000 <_malloc_r+0xa8>
 8002ff4:	1a21      	subs	r1, r4, r0
 8002ff6:	4630      	mov	r0, r6
 8002ff8:	f000 fc20 	bl	800383c <_sbrk_r>
 8002ffc:	3001      	adds	r0, #1
 8002ffe:	d0cf      	beq.n	8002fa0 <_malloc_r+0x48>
 8003000:	6025      	str	r5, [r4, #0]
 8003002:	e7db      	b.n	8002fbc <_malloc_r+0x64>
 8003004:	2000031c 	.word	0x2000031c
 8003008:	20000320 	.word	0x20000320

0800300c <__ssputs_r>:
 800300c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003010:	688e      	ldr	r6, [r1, #8]
 8003012:	4682      	mov	sl, r0
 8003014:	429e      	cmp	r6, r3
 8003016:	460c      	mov	r4, r1
 8003018:	4690      	mov	r8, r2
 800301a:	4699      	mov	r9, r3
 800301c:	d837      	bhi.n	800308e <__ssputs_r+0x82>
 800301e:	898a      	ldrh	r2, [r1, #12]
 8003020:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003024:	d031      	beq.n	800308a <__ssputs_r+0x7e>
 8003026:	2302      	movs	r3, #2
 8003028:	6825      	ldr	r5, [r4, #0]
 800302a:	6909      	ldr	r1, [r1, #16]
 800302c:	1a6f      	subs	r7, r5, r1
 800302e:	6965      	ldr	r5, [r4, #20]
 8003030:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003034:	fb95 f5f3 	sdiv	r5, r5, r3
 8003038:	f109 0301 	add.w	r3, r9, #1
 800303c:	443b      	add	r3, r7
 800303e:	429d      	cmp	r5, r3
 8003040:	bf38      	it	cc
 8003042:	461d      	movcc	r5, r3
 8003044:	0553      	lsls	r3, r2, #21
 8003046:	d530      	bpl.n	80030aa <__ssputs_r+0x9e>
 8003048:	4629      	mov	r1, r5
 800304a:	f7ff ff85 	bl	8002f58 <_malloc_r>
 800304e:	4606      	mov	r6, r0
 8003050:	b950      	cbnz	r0, 8003068 <__ssputs_r+0x5c>
 8003052:	230c      	movs	r3, #12
 8003054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003058:	f8ca 3000 	str.w	r3, [sl]
 800305c:	89a3      	ldrh	r3, [r4, #12]
 800305e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003062:	81a3      	strh	r3, [r4, #12]
 8003064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003068:	463a      	mov	r2, r7
 800306a:	6921      	ldr	r1, [r4, #16]
 800306c:	f000 fe50 	bl	8003d10 <memcpy>
 8003070:	89a3      	ldrh	r3, [r4, #12]
 8003072:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800307a:	81a3      	strh	r3, [r4, #12]
 800307c:	6126      	str	r6, [r4, #16]
 800307e:	443e      	add	r6, r7
 8003080:	6026      	str	r6, [r4, #0]
 8003082:	464e      	mov	r6, r9
 8003084:	6165      	str	r5, [r4, #20]
 8003086:	1bed      	subs	r5, r5, r7
 8003088:	60a5      	str	r5, [r4, #8]
 800308a:	454e      	cmp	r6, r9
 800308c:	d900      	bls.n	8003090 <__ssputs_r+0x84>
 800308e:	464e      	mov	r6, r9
 8003090:	4632      	mov	r2, r6
 8003092:	4641      	mov	r1, r8
 8003094:	6820      	ldr	r0, [r4, #0]
 8003096:	f000 fe46 	bl	8003d26 <memmove>
 800309a:	68a3      	ldr	r3, [r4, #8]
 800309c:	2000      	movs	r0, #0
 800309e:	1b9b      	subs	r3, r3, r6
 80030a0:	60a3      	str	r3, [r4, #8]
 80030a2:	6823      	ldr	r3, [r4, #0]
 80030a4:	441e      	add	r6, r3
 80030a6:	6026      	str	r6, [r4, #0]
 80030a8:	e7dc      	b.n	8003064 <__ssputs_r+0x58>
 80030aa:	462a      	mov	r2, r5
 80030ac:	f000 fea2 	bl	8003df4 <_realloc_r>
 80030b0:	4606      	mov	r6, r0
 80030b2:	2800      	cmp	r0, #0
 80030b4:	d1e2      	bne.n	800307c <__ssputs_r+0x70>
 80030b6:	6921      	ldr	r1, [r4, #16]
 80030b8:	4650      	mov	r0, sl
 80030ba:	f000 fe4f 	bl	8003d5c <_free_r>
 80030be:	e7c8      	b.n	8003052 <__ssputs_r+0x46>

080030c0 <_svfiprintf_r>:
 80030c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030c4:	461d      	mov	r5, r3
 80030c6:	898b      	ldrh	r3, [r1, #12]
 80030c8:	b09d      	sub	sp, #116	; 0x74
 80030ca:	061f      	lsls	r7, r3, #24
 80030cc:	4680      	mov	r8, r0
 80030ce:	460c      	mov	r4, r1
 80030d0:	4616      	mov	r6, r2
 80030d2:	d50f      	bpl.n	80030f4 <_svfiprintf_r+0x34>
 80030d4:	690b      	ldr	r3, [r1, #16]
 80030d6:	b96b      	cbnz	r3, 80030f4 <_svfiprintf_r+0x34>
 80030d8:	2140      	movs	r1, #64	; 0x40
 80030da:	f7ff ff3d 	bl	8002f58 <_malloc_r>
 80030de:	6020      	str	r0, [r4, #0]
 80030e0:	6120      	str	r0, [r4, #16]
 80030e2:	b928      	cbnz	r0, 80030f0 <_svfiprintf_r+0x30>
 80030e4:	230c      	movs	r3, #12
 80030e6:	f8c8 3000 	str.w	r3, [r8]
 80030ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030ee:	e0c8      	b.n	8003282 <_svfiprintf_r+0x1c2>
 80030f0:	2340      	movs	r3, #64	; 0x40
 80030f2:	6163      	str	r3, [r4, #20]
 80030f4:	2300      	movs	r3, #0
 80030f6:	9309      	str	r3, [sp, #36]	; 0x24
 80030f8:	2320      	movs	r3, #32
 80030fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030fe:	2330      	movs	r3, #48	; 0x30
 8003100:	f04f 0b01 	mov.w	fp, #1
 8003104:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003108:	9503      	str	r5, [sp, #12]
 800310a:	4637      	mov	r7, r6
 800310c:	463d      	mov	r5, r7
 800310e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003112:	b10b      	cbz	r3, 8003118 <_svfiprintf_r+0x58>
 8003114:	2b25      	cmp	r3, #37	; 0x25
 8003116:	d13e      	bne.n	8003196 <_svfiprintf_r+0xd6>
 8003118:	ebb7 0a06 	subs.w	sl, r7, r6
 800311c:	d00b      	beq.n	8003136 <_svfiprintf_r+0x76>
 800311e:	4653      	mov	r3, sl
 8003120:	4632      	mov	r2, r6
 8003122:	4621      	mov	r1, r4
 8003124:	4640      	mov	r0, r8
 8003126:	f7ff ff71 	bl	800300c <__ssputs_r>
 800312a:	3001      	adds	r0, #1
 800312c:	f000 80a4 	beq.w	8003278 <_svfiprintf_r+0x1b8>
 8003130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003132:	4453      	add	r3, sl
 8003134:	9309      	str	r3, [sp, #36]	; 0x24
 8003136:	783b      	ldrb	r3, [r7, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 809d 	beq.w	8003278 <_svfiprintf_r+0x1b8>
 800313e:	2300      	movs	r3, #0
 8003140:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003144:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003148:	9304      	str	r3, [sp, #16]
 800314a:	9307      	str	r3, [sp, #28]
 800314c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003150:	931a      	str	r3, [sp, #104]	; 0x68
 8003152:	462f      	mov	r7, r5
 8003154:	2205      	movs	r2, #5
 8003156:	f817 1b01 	ldrb.w	r1, [r7], #1
 800315a:	4850      	ldr	r0, [pc, #320]	; (800329c <_svfiprintf_r+0x1dc>)
 800315c:	f000 fdca 	bl	8003cf4 <memchr>
 8003160:	9b04      	ldr	r3, [sp, #16]
 8003162:	b9d0      	cbnz	r0, 800319a <_svfiprintf_r+0xda>
 8003164:	06d9      	lsls	r1, r3, #27
 8003166:	bf44      	itt	mi
 8003168:	2220      	movmi	r2, #32
 800316a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800316e:	071a      	lsls	r2, r3, #28
 8003170:	bf44      	itt	mi
 8003172:	222b      	movmi	r2, #43	; 0x2b
 8003174:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003178:	782a      	ldrb	r2, [r5, #0]
 800317a:	2a2a      	cmp	r2, #42	; 0x2a
 800317c:	d015      	beq.n	80031aa <_svfiprintf_r+0xea>
 800317e:	462f      	mov	r7, r5
 8003180:	2000      	movs	r0, #0
 8003182:	250a      	movs	r5, #10
 8003184:	9a07      	ldr	r2, [sp, #28]
 8003186:	4639      	mov	r1, r7
 8003188:	f811 3b01 	ldrb.w	r3, [r1], #1
 800318c:	3b30      	subs	r3, #48	; 0x30
 800318e:	2b09      	cmp	r3, #9
 8003190:	d94d      	bls.n	800322e <_svfiprintf_r+0x16e>
 8003192:	b1b8      	cbz	r0, 80031c4 <_svfiprintf_r+0x104>
 8003194:	e00f      	b.n	80031b6 <_svfiprintf_r+0xf6>
 8003196:	462f      	mov	r7, r5
 8003198:	e7b8      	b.n	800310c <_svfiprintf_r+0x4c>
 800319a:	4a40      	ldr	r2, [pc, #256]	; (800329c <_svfiprintf_r+0x1dc>)
 800319c:	463d      	mov	r5, r7
 800319e:	1a80      	subs	r0, r0, r2
 80031a0:	fa0b f000 	lsl.w	r0, fp, r0
 80031a4:	4318      	orrs	r0, r3
 80031a6:	9004      	str	r0, [sp, #16]
 80031a8:	e7d3      	b.n	8003152 <_svfiprintf_r+0x92>
 80031aa:	9a03      	ldr	r2, [sp, #12]
 80031ac:	1d11      	adds	r1, r2, #4
 80031ae:	6812      	ldr	r2, [r2, #0]
 80031b0:	9103      	str	r1, [sp, #12]
 80031b2:	2a00      	cmp	r2, #0
 80031b4:	db01      	blt.n	80031ba <_svfiprintf_r+0xfa>
 80031b6:	9207      	str	r2, [sp, #28]
 80031b8:	e004      	b.n	80031c4 <_svfiprintf_r+0x104>
 80031ba:	4252      	negs	r2, r2
 80031bc:	f043 0302 	orr.w	r3, r3, #2
 80031c0:	9207      	str	r2, [sp, #28]
 80031c2:	9304      	str	r3, [sp, #16]
 80031c4:	783b      	ldrb	r3, [r7, #0]
 80031c6:	2b2e      	cmp	r3, #46	; 0x2e
 80031c8:	d10c      	bne.n	80031e4 <_svfiprintf_r+0x124>
 80031ca:	787b      	ldrb	r3, [r7, #1]
 80031cc:	2b2a      	cmp	r3, #42	; 0x2a
 80031ce:	d133      	bne.n	8003238 <_svfiprintf_r+0x178>
 80031d0:	9b03      	ldr	r3, [sp, #12]
 80031d2:	3702      	adds	r7, #2
 80031d4:	1d1a      	adds	r2, r3, #4
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	9203      	str	r2, [sp, #12]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	bfb8      	it	lt
 80031de:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80031e2:	9305      	str	r3, [sp, #20]
 80031e4:	4d2e      	ldr	r5, [pc, #184]	; (80032a0 <_svfiprintf_r+0x1e0>)
 80031e6:	2203      	movs	r2, #3
 80031e8:	7839      	ldrb	r1, [r7, #0]
 80031ea:	4628      	mov	r0, r5
 80031ec:	f000 fd82 	bl	8003cf4 <memchr>
 80031f0:	b138      	cbz	r0, 8003202 <_svfiprintf_r+0x142>
 80031f2:	2340      	movs	r3, #64	; 0x40
 80031f4:	1b40      	subs	r0, r0, r5
 80031f6:	fa03 f000 	lsl.w	r0, r3, r0
 80031fa:	9b04      	ldr	r3, [sp, #16]
 80031fc:	3701      	adds	r7, #1
 80031fe:	4303      	orrs	r3, r0
 8003200:	9304      	str	r3, [sp, #16]
 8003202:	7839      	ldrb	r1, [r7, #0]
 8003204:	2206      	movs	r2, #6
 8003206:	4827      	ldr	r0, [pc, #156]	; (80032a4 <_svfiprintf_r+0x1e4>)
 8003208:	1c7e      	adds	r6, r7, #1
 800320a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800320e:	f000 fd71 	bl	8003cf4 <memchr>
 8003212:	2800      	cmp	r0, #0
 8003214:	d038      	beq.n	8003288 <_svfiprintf_r+0x1c8>
 8003216:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <_svfiprintf_r+0x1e8>)
 8003218:	bb13      	cbnz	r3, 8003260 <_svfiprintf_r+0x1a0>
 800321a:	9b03      	ldr	r3, [sp, #12]
 800321c:	3307      	adds	r3, #7
 800321e:	f023 0307 	bic.w	r3, r3, #7
 8003222:	3308      	adds	r3, #8
 8003224:	9303      	str	r3, [sp, #12]
 8003226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003228:	444b      	add	r3, r9
 800322a:	9309      	str	r3, [sp, #36]	; 0x24
 800322c:	e76d      	b.n	800310a <_svfiprintf_r+0x4a>
 800322e:	fb05 3202 	mla	r2, r5, r2, r3
 8003232:	2001      	movs	r0, #1
 8003234:	460f      	mov	r7, r1
 8003236:	e7a6      	b.n	8003186 <_svfiprintf_r+0xc6>
 8003238:	2300      	movs	r3, #0
 800323a:	250a      	movs	r5, #10
 800323c:	4619      	mov	r1, r3
 800323e:	3701      	adds	r7, #1
 8003240:	9305      	str	r3, [sp, #20]
 8003242:	4638      	mov	r0, r7
 8003244:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003248:	3a30      	subs	r2, #48	; 0x30
 800324a:	2a09      	cmp	r2, #9
 800324c:	d903      	bls.n	8003256 <_svfiprintf_r+0x196>
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0c8      	beq.n	80031e4 <_svfiprintf_r+0x124>
 8003252:	9105      	str	r1, [sp, #20]
 8003254:	e7c6      	b.n	80031e4 <_svfiprintf_r+0x124>
 8003256:	fb05 2101 	mla	r1, r5, r1, r2
 800325a:	2301      	movs	r3, #1
 800325c:	4607      	mov	r7, r0
 800325e:	e7f0      	b.n	8003242 <_svfiprintf_r+0x182>
 8003260:	ab03      	add	r3, sp, #12
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	4622      	mov	r2, r4
 8003266:	4b11      	ldr	r3, [pc, #68]	; (80032ac <_svfiprintf_r+0x1ec>)
 8003268:	a904      	add	r1, sp, #16
 800326a:	4640      	mov	r0, r8
 800326c:	f3af 8000 	nop.w
 8003270:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003274:	4681      	mov	r9, r0
 8003276:	d1d6      	bne.n	8003226 <_svfiprintf_r+0x166>
 8003278:	89a3      	ldrh	r3, [r4, #12]
 800327a:	065b      	lsls	r3, r3, #25
 800327c:	f53f af35 	bmi.w	80030ea <_svfiprintf_r+0x2a>
 8003280:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003282:	b01d      	add	sp, #116	; 0x74
 8003284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003288:	ab03      	add	r3, sp, #12
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	4622      	mov	r2, r4
 800328e:	4b07      	ldr	r3, [pc, #28]	; (80032ac <_svfiprintf_r+0x1ec>)
 8003290:	a904      	add	r1, sp, #16
 8003292:	4640      	mov	r0, r8
 8003294:	f000 f9c0 	bl	8003618 <_printf_i>
 8003298:	e7ea      	b.n	8003270 <_svfiprintf_r+0x1b0>
 800329a:	bf00      	nop
 800329c:	08003f98 	.word	0x08003f98
 80032a0:	08003f9e 	.word	0x08003f9e
 80032a4:	08003fa2 	.word	0x08003fa2
 80032a8:	00000000 	.word	0x00000000
 80032ac:	0800300d 	.word	0x0800300d

080032b0 <__sfputc_r>:
 80032b0:	6893      	ldr	r3, [r2, #8]
 80032b2:	b410      	push	{r4}
 80032b4:	3b01      	subs	r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	6093      	str	r3, [r2, #8]
 80032ba:	da07      	bge.n	80032cc <__sfputc_r+0x1c>
 80032bc:	6994      	ldr	r4, [r2, #24]
 80032be:	42a3      	cmp	r3, r4
 80032c0:	db01      	blt.n	80032c6 <__sfputc_r+0x16>
 80032c2:	290a      	cmp	r1, #10
 80032c4:	d102      	bne.n	80032cc <__sfputc_r+0x1c>
 80032c6:	bc10      	pop	{r4}
 80032c8:	f000 bb0c 	b.w	80038e4 <__swbuf_r>
 80032cc:	6813      	ldr	r3, [r2, #0]
 80032ce:	1c58      	adds	r0, r3, #1
 80032d0:	6010      	str	r0, [r2, #0]
 80032d2:	7019      	strb	r1, [r3, #0]
 80032d4:	4608      	mov	r0, r1
 80032d6:	bc10      	pop	{r4}
 80032d8:	4770      	bx	lr

080032da <__sfputs_r>:
 80032da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032dc:	4606      	mov	r6, r0
 80032de:	460f      	mov	r7, r1
 80032e0:	4614      	mov	r4, r2
 80032e2:	18d5      	adds	r5, r2, r3
 80032e4:	42ac      	cmp	r4, r5
 80032e6:	d101      	bne.n	80032ec <__sfputs_r+0x12>
 80032e8:	2000      	movs	r0, #0
 80032ea:	e007      	b.n	80032fc <__sfputs_r+0x22>
 80032ec:	463a      	mov	r2, r7
 80032ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032f2:	4630      	mov	r0, r6
 80032f4:	f7ff ffdc 	bl	80032b0 <__sfputc_r>
 80032f8:	1c43      	adds	r3, r0, #1
 80032fa:	d1f3      	bne.n	80032e4 <__sfputs_r+0xa>
 80032fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003300 <_vfiprintf_r>:
 8003300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003304:	460c      	mov	r4, r1
 8003306:	b09d      	sub	sp, #116	; 0x74
 8003308:	4617      	mov	r7, r2
 800330a:	461d      	mov	r5, r3
 800330c:	4606      	mov	r6, r0
 800330e:	b118      	cbz	r0, 8003318 <_vfiprintf_r+0x18>
 8003310:	6983      	ldr	r3, [r0, #24]
 8003312:	b90b      	cbnz	r3, 8003318 <_vfiprintf_r+0x18>
 8003314:	f7ff fd96 	bl	8002e44 <__sinit>
 8003318:	4b7c      	ldr	r3, [pc, #496]	; (800350c <_vfiprintf_r+0x20c>)
 800331a:	429c      	cmp	r4, r3
 800331c:	d158      	bne.n	80033d0 <_vfiprintf_r+0xd0>
 800331e:	6874      	ldr	r4, [r6, #4]
 8003320:	89a3      	ldrh	r3, [r4, #12]
 8003322:	0718      	lsls	r0, r3, #28
 8003324:	d55e      	bpl.n	80033e4 <_vfiprintf_r+0xe4>
 8003326:	6923      	ldr	r3, [r4, #16]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d05b      	beq.n	80033e4 <_vfiprintf_r+0xe4>
 800332c:	2300      	movs	r3, #0
 800332e:	9309      	str	r3, [sp, #36]	; 0x24
 8003330:	2320      	movs	r3, #32
 8003332:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003336:	2330      	movs	r3, #48	; 0x30
 8003338:	f04f 0b01 	mov.w	fp, #1
 800333c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003340:	9503      	str	r5, [sp, #12]
 8003342:	46b8      	mov	r8, r7
 8003344:	4645      	mov	r5, r8
 8003346:	f815 3b01 	ldrb.w	r3, [r5], #1
 800334a:	b10b      	cbz	r3, 8003350 <_vfiprintf_r+0x50>
 800334c:	2b25      	cmp	r3, #37	; 0x25
 800334e:	d154      	bne.n	80033fa <_vfiprintf_r+0xfa>
 8003350:	ebb8 0a07 	subs.w	sl, r8, r7
 8003354:	d00b      	beq.n	800336e <_vfiprintf_r+0x6e>
 8003356:	4653      	mov	r3, sl
 8003358:	463a      	mov	r2, r7
 800335a:	4621      	mov	r1, r4
 800335c:	4630      	mov	r0, r6
 800335e:	f7ff ffbc 	bl	80032da <__sfputs_r>
 8003362:	3001      	adds	r0, #1
 8003364:	f000 80c2 	beq.w	80034ec <_vfiprintf_r+0x1ec>
 8003368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800336a:	4453      	add	r3, sl
 800336c:	9309      	str	r3, [sp, #36]	; 0x24
 800336e:	f898 3000 	ldrb.w	r3, [r8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 80ba 	beq.w	80034ec <_vfiprintf_r+0x1ec>
 8003378:	2300      	movs	r3, #0
 800337a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800337e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003382:	9304      	str	r3, [sp, #16]
 8003384:	9307      	str	r3, [sp, #28]
 8003386:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800338a:	931a      	str	r3, [sp, #104]	; 0x68
 800338c:	46a8      	mov	r8, r5
 800338e:	2205      	movs	r2, #5
 8003390:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003394:	485e      	ldr	r0, [pc, #376]	; (8003510 <_vfiprintf_r+0x210>)
 8003396:	f000 fcad 	bl	8003cf4 <memchr>
 800339a:	9b04      	ldr	r3, [sp, #16]
 800339c:	bb78      	cbnz	r0, 80033fe <_vfiprintf_r+0xfe>
 800339e:	06d9      	lsls	r1, r3, #27
 80033a0:	bf44      	itt	mi
 80033a2:	2220      	movmi	r2, #32
 80033a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033a8:	071a      	lsls	r2, r3, #28
 80033aa:	bf44      	itt	mi
 80033ac:	222b      	movmi	r2, #43	; 0x2b
 80033ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033b2:	782a      	ldrb	r2, [r5, #0]
 80033b4:	2a2a      	cmp	r2, #42	; 0x2a
 80033b6:	d02a      	beq.n	800340e <_vfiprintf_r+0x10e>
 80033b8:	46a8      	mov	r8, r5
 80033ba:	2000      	movs	r0, #0
 80033bc:	250a      	movs	r5, #10
 80033be:	9a07      	ldr	r2, [sp, #28]
 80033c0:	4641      	mov	r1, r8
 80033c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033c6:	3b30      	subs	r3, #48	; 0x30
 80033c8:	2b09      	cmp	r3, #9
 80033ca:	d969      	bls.n	80034a0 <_vfiprintf_r+0x1a0>
 80033cc:	b360      	cbz	r0, 8003428 <_vfiprintf_r+0x128>
 80033ce:	e024      	b.n	800341a <_vfiprintf_r+0x11a>
 80033d0:	4b50      	ldr	r3, [pc, #320]	; (8003514 <_vfiprintf_r+0x214>)
 80033d2:	429c      	cmp	r4, r3
 80033d4:	d101      	bne.n	80033da <_vfiprintf_r+0xda>
 80033d6:	68b4      	ldr	r4, [r6, #8]
 80033d8:	e7a2      	b.n	8003320 <_vfiprintf_r+0x20>
 80033da:	4b4f      	ldr	r3, [pc, #316]	; (8003518 <_vfiprintf_r+0x218>)
 80033dc:	429c      	cmp	r4, r3
 80033de:	bf08      	it	eq
 80033e0:	68f4      	ldreq	r4, [r6, #12]
 80033e2:	e79d      	b.n	8003320 <_vfiprintf_r+0x20>
 80033e4:	4621      	mov	r1, r4
 80033e6:	4630      	mov	r0, r6
 80033e8:	f000 fae0 	bl	80039ac <__swsetup_r>
 80033ec:	2800      	cmp	r0, #0
 80033ee:	d09d      	beq.n	800332c <_vfiprintf_r+0x2c>
 80033f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033f4:	b01d      	add	sp, #116	; 0x74
 80033f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033fa:	46a8      	mov	r8, r5
 80033fc:	e7a2      	b.n	8003344 <_vfiprintf_r+0x44>
 80033fe:	4a44      	ldr	r2, [pc, #272]	; (8003510 <_vfiprintf_r+0x210>)
 8003400:	4645      	mov	r5, r8
 8003402:	1a80      	subs	r0, r0, r2
 8003404:	fa0b f000 	lsl.w	r0, fp, r0
 8003408:	4318      	orrs	r0, r3
 800340a:	9004      	str	r0, [sp, #16]
 800340c:	e7be      	b.n	800338c <_vfiprintf_r+0x8c>
 800340e:	9a03      	ldr	r2, [sp, #12]
 8003410:	1d11      	adds	r1, r2, #4
 8003412:	6812      	ldr	r2, [r2, #0]
 8003414:	9103      	str	r1, [sp, #12]
 8003416:	2a00      	cmp	r2, #0
 8003418:	db01      	blt.n	800341e <_vfiprintf_r+0x11e>
 800341a:	9207      	str	r2, [sp, #28]
 800341c:	e004      	b.n	8003428 <_vfiprintf_r+0x128>
 800341e:	4252      	negs	r2, r2
 8003420:	f043 0302 	orr.w	r3, r3, #2
 8003424:	9207      	str	r2, [sp, #28]
 8003426:	9304      	str	r3, [sp, #16]
 8003428:	f898 3000 	ldrb.w	r3, [r8]
 800342c:	2b2e      	cmp	r3, #46	; 0x2e
 800342e:	d10e      	bne.n	800344e <_vfiprintf_r+0x14e>
 8003430:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003434:	2b2a      	cmp	r3, #42	; 0x2a
 8003436:	d138      	bne.n	80034aa <_vfiprintf_r+0x1aa>
 8003438:	9b03      	ldr	r3, [sp, #12]
 800343a:	f108 0802 	add.w	r8, r8, #2
 800343e:	1d1a      	adds	r2, r3, #4
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	9203      	str	r2, [sp, #12]
 8003444:	2b00      	cmp	r3, #0
 8003446:	bfb8      	it	lt
 8003448:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800344c:	9305      	str	r3, [sp, #20]
 800344e:	4d33      	ldr	r5, [pc, #204]	; (800351c <_vfiprintf_r+0x21c>)
 8003450:	2203      	movs	r2, #3
 8003452:	f898 1000 	ldrb.w	r1, [r8]
 8003456:	4628      	mov	r0, r5
 8003458:	f000 fc4c 	bl	8003cf4 <memchr>
 800345c:	b140      	cbz	r0, 8003470 <_vfiprintf_r+0x170>
 800345e:	2340      	movs	r3, #64	; 0x40
 8003460:	1b40      	subs	r0, r0, r5
 8003462:	fa03 f000 	lsl.w	r0, r3, r0
 8003466:	9b04      	ldr	r3, [sp, #16]
 8003468:	f108 0801 	add.w	r8, r8, #1
 800346c:	4303      	orrs	r3, r0
 800346e:	9304      	str	r3, [sp, #16]
 8003470:	f898 1000 	ldrb.w	r1, [r8]
 8003474:	2206      	movs	r2, #6
 8003476:	482a      	ldr	r0, [pc, #168]	; (8003520 <_vfiprintf_r+0x220>)
 8003478:	f108 0701 	add.w	r7, r8, #1
 800347c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003480:	f000 fc38 	bl	8003cf4 <memchr>
 8003484:	2800      	cmp	r0, #0
 8003486:	d037      	beq.n	80034f8 <_vfiprintf_r+0x1f8>
 8003488:	4b26      	ldr	r3, [pc, #152]	; (8003524 <_vfiprintf_r+0x224>)
 800348a:	bb1b      	cbnz	r3, 80034d4 <_vfiprintf_r+0x1d4>
 800348c:	9b03      	ldr	r3, [sp, #12]
 800348e:	3307      	adds	r3, #7
 8003490:	f023 0307 	bic.w	r3, r3, #7
 8003494:	3308      	adds	r3, #8
 8003496:	9303      	str	r3, [sp, #12]
 8003498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800349a:	444b      	add	r3, r9
 800349c:	9309      	str	r3, [sp, #36]	; 0x24
 800349e:	e750      	b.n	8003342 <_vfiprintf_r+0x42>
 80034a0:	fb05 3202 	mla	r2, r5, r2, r3
 80034a4:	2001      	movs	r0, #1
 80034a6:	4688      	mov	r8, r1
 80034a8:	e78a      	b.n	80033c0 <_vfiprintf_r+0xc0>
 80034aa:	2300      	movs	r3, #0
 80034ac:	250a      	movs	r5, #10
 80034ae:	4619      	mov	r1, r3
 80034b0:	f108 0801 	add.w	r8, r8, #1
 80034b4:	9305      	str	r3, [sp, #20]
 80034b6:	4640      	mov	r0, r8
 80034b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034bc:	3a30      	subs	r2, #48	; 0x30
 80034be:	2a09      	cmp	r2, #9
 80034c0:	d903      	bls.n	80034ca <_vfiprintf_r+0x1ca>
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0c3      	beq.n	800344e <_vfiprintf_r+0x14e>
 80034c6:	9105      	str	r1, [sp, #20]
 80034c8:	e7c1      	b.n	800344e <_vfiprintf_r+0x14e>
 80034ca:	fb05 2101 	mla	r1, r5, r1, r2
 80034ce:	2301      	movs	r3, #1
 80034d0:	4680      	mov	r8, r0
 80034d2:	e7f0      	b.n	80034b6 <_vfiprintf_r+0x1b6>
 80034d4:	ab03      	add	r3, sp, #12
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	4622      	mov	r2, r4
 80034da:	4b13      	ldr	r3, [pc, #76]	; (8003528 <_vfiprintf_r+0x228>)
 80034dc:	a904      	add	r1, sp, #16
 80034de:	4630      	mov	r0, r6
 80034e0:	f3af 8000 	nop.w
 80034e4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80034e8:	4681      	mov	r9, r0
 80034ea:	d1d5      	bne.n	8003498 <_vfiprintf_r+0x198>
 80034ec:	89a3      	ldrh	r3, [r4, #12]
 80034ee:	065b      	lsls	r3, r3, #25
 80034f0:	f53f af7e 	bmi.w	80033f0 <_vfiprintf_r+0xf0>
 80034f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034f6:	e77d      	b.n	80033f4 <_vfiprintf_r+0xf4>
 80034f8:	ab03      	add	r3, sp, #12
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	4622      	mov	r2, r4
 80034fe:	4b0a      	ldr	r3, [pc, #40]	; (8003528 <_vfiprintf_r+0x228>)
 8003500:	a904      	add	r1, sp, #16
 8003502:	4630      	mov	r0, r6
 8003504:	f000 f888 	bl	8003618 <_printf_i>
 8003508:	e7ec      	b.n	80034e4 <_vfiprintf_r+0x1e4>
 800350a:	bf00      	nop
 800350c:	08003f58 	.word	0x08003f58
 8003510:	08003f98 	.word	0x08003f98
 8003514:	08003f78 	.word	0x08003f78
 8003518:	08003f38 	.word	0x08003f38
 800351c:	08003f9e 	.word	0x08003f9e
 8003520:	08003fa2 	.word	0x08003fa2
 8003524:	00000000 	.word	0x00000000
 8003528:	080032db 	.word	0x080032db

0800352c <_printf_common>:
 800352c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003530:	4691      	mov	r9, r2
 8003532:	461f      	mov	r7, r3
 8003534:	688a      	ldr	r2, [r1, #8]
 8003536:	690b      	ldr	r3, [r1, #16]
 8003538:	4606      	mov	r6, r0
 800353a:	4293      	cmp	r3, r2
 800353c:	bfb8      	it	lt
 800353e:	4613      	movlt	r3, r2
 8003540:	f8c9 3000 	str.w	r3, [r9]
 8003544:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003548:	460c      	mov	r4, r1
 800354a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800354e:	b112      	cbz	r2, 8003556 <_printf_common+0x2a>
 8003550:	3301      	adds	r3, #1
 8003552:	f8c9 3000 	str.w	r3, [r9]
 8003556:	6823      	ldr	r3, [r4, #0]
 8003558:	0699      	lsls	r1, r3, #26
 800355a:	bf42      	ittt	mi
 800355c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003560:	3302      	addmi	r3, #2
 8003562:	f8c9 3000 	strmi.w	r3, [r9]
 8003566:	6825      	ldr	r5, [r4, #0]
 8003568:	f015 0506 	ands.w	r5, r5, #6
 800356c:	d107      	bne.n	800357e <_printf_common+0x52>
 800356e:	f104 0a19 	add.w	sl, r4, #25
 8003572:	68e3      	ldr	r3, [r4, #12]
 8003574:	f8d9 2000 	ldr.w	r2, [r9]
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	42ab      	cmp	r3, r5
 800357c:	dc29      	bgt.n	80035d2 <_printf_common+0xa6>
 800357e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003582:	6822      	ldr	r2, [r4, #0]
 8003584:	3300      	adds	r3, #0
 8003586:	bf18      	it	ne
 8003588:	2301      	movne	r3, #1
 800358a:	0692      	lsls	r2, r2, #26
 800358c:	d42e      	bmi.n	80035ec <_printf_common+0xc0>
 800358e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003592:	4639      	mov	r1, r7
 8003594:	4630      	mov	r0, r6
 8003596:	47c0      	blx	r8
 8003598:	3001      	adds	r0, #1
 800359a:	d021      	beq.n	80035e0 <_printf_common+0xb4>
 800359c:	6823      	ldr	r3, [r4, #0]
 800359e:	68e5      	ldr	r5, [r4, #12]
 80035a0:	f003 0306 	and.w	r3, r3, #6
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	bf18      	it	ne
 80035a8:	2500      	movne	r5, #0
 80035aa:	f8d9 2000 	ldr.w	r2, [r9]
 80035ae:	f04f 0900 	mov.w	r9, #0
 80035b2:	bf08      	it	eq
 80035b4:	1aad      	subeq	r5, r5, r2
 80035b6:	68a3      	ldr	r3, [r4, #8]
 80035b8:	6922      	ldr	r2, [r4, #16]
 80035ba:	bf08      	it	eq
 80035bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035c0:	4293      	cmp	r3, r2
 80035c2:	bfc4      	itt	gt
 80035c4:	1a9b      	subgt	r3, r3, r2
 80035c6:	18ed      	addgt	r5, r5, r3
 80035c8:	341a      	adds	r4, #26
 80035ca:	454d      	cmp	r5, r9
 80035cc:	d11a      	bne.n	8003604 <_printf_common+0xd8>
 80035ce:	2000      	movs	r0, #0
 80035d0:	e008      	b.n	80035e4 <_printf_common+0xb8>
 80035d2:	2301      	movs	r3, #1
 80035d4:	4652      	mov	r2, sl
 80035d6:	4639      	mov	r1, r7
 80035d8:	4630      	mov	r0, r6
 80035da:	47c0      	blx	r8
 80035dc:	3001      	adds	r0, #1
 80035de:	d103      	bne.n	80035e8 <_printf_common+0xbc>
 80035e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035e8:	3501      	adds	r5, #1
 80035ea:	e7c2      	b.n	8003572 <_printf_common+0x46>
 80035ec:	2030      	movs	r0, #48	; 0x30
 80035ee:	18e1      	adds	r1, r4, r3
 80035f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035fa:	4422      	add	r2, r4
 80035fc:	3302      	adds	r3, #2
 80035fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003602:	e7c4      	b.n	800358e <_printf_common+0x62>
 8003604:	2301      	movs	r3, #1
 8003606:	4622      	mov	r2, r4
 8003608:	4639      	mov	r1, r7
 800360a:	4630      	mov	r0, r6
 800360c:	47c0      	blx	r8
 800360e:	3001      	adds	r0, #1
 8003610:	d0e6      	beq.n	80035e0 <_printf_common+0xb4>
 8003612:	f109 0901 	add.w	r9, r9, #1
 8003616:	e7d8      	b.n	80035ca <_printf_common+0x9e>

08003618 <_printf_i>:
 8003618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800361c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003620:	460c      	mov	r4, r1
 8003622:	7e09      	ldrb	r1, [r1, #24]
 8003624:	b085      	sub	sp, #20
 8003626:	296e      	cmp	r1, #110	; 0x6e
 8003628:	4617      	mov	r7, r2
 800362a:	4606      	mov	r6, r0
 800362c:	4698      	mov	r8, r3
 800362e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003630:	f000 80b3 	beq.w	800379a <_printf_i+0x182>
 8003634:	d822      	bhi.n	800367c <_printf_i+0x64>
 8003636:	2963      	cmp	r1, #99	; 0x63
 8003638:	d036      	beq.n	80036a8 <_printf_i+0x90>
 800363a:	d80a      	bhi.n	8003652 <_printf_i+0x3a>
 800363c:	2900      	cmp	r1, #0
 800363e:	f000 80b9 	beq.w	80037b4 <_printf_i+0x19c>
 8003642:	2958      	cmp	r1, #88	; 0x58
 8003644:	f000 8083 	beq.w	800374e <_printf_i+0x136>
 8003648:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800364c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003650:	e032      	b.n	80036b8 <_printf_i+0xa0>
 8003652:	2964      	cmp	r1, #100	; 0x64
 8003654:	d001      	beq.n	800365a <_printf_i+0x42>
 8003656:	2969      	cmp	r1, #105	; 0x69
 8003658:	d1f6      	bne.n	8003648 <_printf_i+0x30>
 800365a:	6820      	ldr	r0, [r4, #0]
 800365c:	6813      	ldr	r3, [r2, #0]
 800365e:	0605      	lsls	r5, r0, #24
 8003660:	f103 0104 	add.w	r1, r3, #4
 8003664:	d52a      	bpl.n	80036bc <_printf_i+0xa4>
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6011      	str	r1, [r2, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	da03      	bge.n	8003676 <_printf_i+0x5e>
 800366e:	222d      	movs	r2, #45	; 0x2d
 8003670:	425b      	negs	r3, r3
 8003672:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003676:	486f      	ldr	r0, [pc, #444]	; (8003834 <_printf_i+0x21c>)
 8003678:	220a      	movs	r2, #10
 800367a:	e039      	b.n	80036f0 <_printf_i+0xd8>
 800367c:	2973      	cmp	r1, #115	; 0x73
 800367e:	f000 809d 	beq.w	80037bc <_printf_i+0x1a4>
 8003682:	d808      	bhi.n	8003696 <_printf_i+0x7e>
 8003684:	296f      	cmp	r1, #111	; 0x6f
 8003686:	d020      	beq.n	80036ca <_printf_i+0xb2>
 8003688:	2970      	cmp	r1, #112	; 0x70
 800368a:	d1dd      	bne.n	8003648 <_printf_i+0x30>
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	f043 0320 	orr.w	r3, r3, #32
 8003692:	6023      	str	r3, [r4, #0]
 8003694:	e003      	b.n	800369e <_printf_i+0x86>
 8003696:	2975      	cmp	r1, #117	; 0x75
 8003698:	d017      	beq.n	80036ca <_printf_i+0xb2>
 800369a:	2978      	cmp	r1, #120	; 0x78
 800369c:	d1d4      	bne.n	8003648 <_printf_i+0x30>
 800369e:	2378      	movs	r3, #120	; 0x78
 80036a0:	4865      	ldr	r0, [pc, #404]	; (8003838 <_printf_i+0x220>)
 80036a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036a6:	e055      	b.n	8003754 <_printf_i+0x13c>
 80036a8:	6813      	ldr	r3, [r2, #0]
 80036aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036ae:	1d19      	adds	r1, r3, #4
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6011      	str	r1, [r2, #0]
 80036b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036b8:	2301      	movs	r3, #1
 80036ba:	e08c      	b.n	80037d6 <_printf_i+0x1be>
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036c2:	6011      	str	r1, [r2, #0]
 80036c4:	bf18      	it	ne
 80036c6:	b21b      	sxthne	r3, r3
 80036c8:	e7cf      	b.n	800366a <_printf_i+0x52>
 80036ca:	6813      	ldr	r3, [r2, #0]
 80036cc:	6825      	ldr	r5, [r4, #0]
 80036ce:	1d18      	adds	r0, r3, #4
 80036d0:	6010      	str	r0, [r2, #0]
 80036d2:	0628      	lsls	r0, r5, #24
 80036d4:	d501      	bpl.n	80036da <_printf_i+0xc2>
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	e002      	b.n	80036e0 <_printf_i+0xc8>
 80036da:	0668      	lsls	r0, r5, #25
 80036dc:	d5fb      	bpl.n	80036d6 <_printf_i+0xbe>
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	296f      	cmp	r1, #111	; 0x6f
 80036e2:	bf14      	ite	ne
 80036e4:	220a      	movne	r2, #10
 80036e6:	2208      	moveq	r2, #8
 80036e8:	4852      	ldr	r0, [pc, #328]	; (8003834 <_printf_i+0x21c>)
 80036ea:	2100      	movs	r1, #0
 80036ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036f0:	6865      	ldr	r5, [r4, #4]
 80036f2:	2d00      	cmp	r5, #0
 80036f4:	60a5      	str	r5, [r4, #8]
 80036f6:	f2c0 8095 	blt.w	8003824 <_printf_i+0x20c>
 80036fa:	6821      	ldr	r1, [r4, #0]
 80036fc:	f021 0104 	bic.w	r1, r1, #4
 8003700:	6021      	str	r1, [r4, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d13d      	bne.n	8003782 <_printf_i+0x16a>
 8003706:	2d00      	cmp	r5, #0
 8003708:	f040 808e 	bne.w	8003828 <_printf_i+0x210>
 800370c:	4665      	mov	r5, ip
 800370e:	2a08      	cmp	r2, #8
 8003710:	d10b      	bne.n	800372a <_printf_i+0x112>
 8003712:	6823      	ldr	r3, [r4, #0]
 8003714:	07db      	lsls	r3, r3, #31
 8003716:	d508      	bpl.n	800372a <_printf_i+0x112>
 8003718:	6923      	ldr	r3, [r4, #16]
 800371a:	6862      	ldr	r2, [r4, #4]
 800371c:	429a      	cmp	r2, r3
 800371e:	bfde      	ittt	le
 8003720:	2330      	movle	r3, #48	; 0x30
 8003722:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003726:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800372a:	ebac 0305 	sub.w	r3, ip, r5
 800372e:	6123      	str	r3, [r4, #16]
 8003730:	f8cd 8000 	str.w	r8, [sp]
 8003734:	463b      	mov	r3, r7
 8003736:	aa03      	add	r2, sp, #12
 8003738:	4621      	mov	r1, r4
 800373a:	4630      	mov	r0, r6
 800373c:	f7ff fef6 	bl	800352c <_printf_common>
 8003740:	3001      	adds	r0, #1
 8003742:	d14d      	bne.n	80037e0 <_printf_i+0x1c8>
 8003744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003748:	b005      	add	sp, #20
 800374a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800374e:	4839      	ldr	r0, [pc, #228]	; (8003834 <_printf_i+0x21c>)
 8003750:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003754:	6813      	ldr	r3, [r2, #0]
 8003756:	6821      	ldr	r1, [r4, #0]
 8003758:	1d1d      	adds	r5, r3, #4
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6015      	str	r5, [r2, #0]
 800375e:	060a      	lsls	r2, r1, #24
 8003760:	d50b      	bpl.n	800377a <_printf_i+0x162>
 8003762:	07ca      	lsls	r2, r1, #31
 8003764:	bf44      	itt	mi
 8003766:	f041 0120 	orrmi.w	r1, r1, #32
 800376a:	6021      	strmi	r1, [r4, #0]
 800376c:	b91b      	cbnz	r3, 8003776 <_printf_i+0x15e>
 800376e:	6822      	ldr	r2, [r4, #0]
 8003770:	f022 0220 	bic.w	r2, r2, #32
 8003774:	6022      	str	r2, [r4, #0]
 8003776:	2210      	movs	r2, #16
 8003778:	e7b7      	b.n	80036ea <_printf_i+0xd2>
 800377a:	064d      	lsls	r5, r1, #25
 800377c:	bf48      	it	mi
 800377e:	b29b      	uxthmi	r3, r3
 8003780:	e7ef      	b.n	8003762 <_printf_i+0x14a>
 8003782:	4665      	mov	r5, ip
 8003784:	fbb3 f1f2 	udiv	r1, r3, r2
 8003788:	fb02 3311 	mls	r3, r2, r1, r3
 800378c:	5cc3      	ldrb	r3, [r0, r3]
 800378e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003792:	460b      	mov	r3, r1
 8003794:	2900      	cmp	r1, #0
 8003796:	d1f5      	bne.n	8003784 <_printf_i+0x16c>
 8003798:	e7b9      	b.n	800370e <_printf_i+0xf6>
 800379a:	6813      	ldr	r3, [r2, #0]
 800379c:	6825      	ldr	r5, [r4, #0]
 800379e:	1d18      	adds	r0, r3, #4
 80037a0:	6961      	ldr	r1, [r4, #20]
 80037a2:	6010      	str	r0, [r2, #0]
 80037a4:	0628      	lsls	r0, r5, #24
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	d501      	bpl.n	80037ae <_printf_i+0x196>
 80037aa:	6019      	str	r1, [r3, #0]
 80037ac:	e002      	b.n	80037b4 <_printf_i+0x19c>
 80037ae:	066a      	lsls	r2, r5, #25
 80037b0:	d5fb      	bpl.n	80037aa <_printf_i+0x192>
 80037b2:	8019      	strh	r1, [r3, #0]
 80037b4:	2300      	movs	r3, #0
 80037b6:	4665      	mov	r5, ip
 80037b8:	6123      	str	r3, [r4, #16]
 80037ba:	e7b9      	b.n	8003730 <_printf_i+0x118>
 80037bc:	6813      	ldr	r3, [r2, #0]
 80037be:	1d19      	adds	r1, r3, #4
 80037c0:	6011      	str	r1, [r2, #0]
 80037c2:	681d      	ldr	r5, [r3, #0]
 80037c4:	6862      	ldr	r2, [r4, #4]
 80037c6:	2100      	movs	r1, #0
 80037c8:	4628      	mov	r0, r5
 80037ca:	f000 fa93 	bl	8003cf4 <memchr>
 80037ce:	b108      	cbz	r0, 80037d4 <_printf_i+0x1bc>
 80037d0:	1b40      	subs	r0, r0, r5
 80037d2:	6060      	str	r0, [r4, #4]
 80037d4:	6863      	ldr	r3, [r4, #4]
 80037d6:	6123      	str	r3, [r4, #16]
 80037d8:	2300      	movs	r3, #0
 80037da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037de:	e7a7      	b.n	8003730 <_printf_i+0x118>
 80037e0:	6923      	ldr	r3, [r4, #16]
 80037e2:	462a      	mov	r2, r5
 80037e4:	4639      	mov	r1, r7
 80037e6:	4630      	mov	r0, r6
 80037e8:	47c0      	blx	r8
 80037ea:	3001      	adds	r0, #1
 80037ec:	d0aa      	beq.n	8003744 <_printf_i+0x12c>
 80037ee:	6823      	ldr	r3, [r4, #0]
 80037f0:	079b      	lsls	r3, r3, #30
 80037f2:	d413      	bmi.n	800381c <_printf_i+0x204>
 80037f4:	68e0      	ldr	r0, [r4, #12]
 80037f6:	9b03      	ldr	r3, [sp, #12]
 80037f8:	4298      	cmp	r0, r3
 80037fa:	bfb8      	it	lt
 80037fc:	4618      	movlt	r0, r3
 80037fe:	e7a3      	b.n	8003748 <_printf_i+0x130>
 8003800:	2301      	movs	r3, #1
 8003802:	464a      	mov	r2, r9
 8003804:	4639      	mov	r1, r7
 8003806:	4630      	mov	r0, r6
 8003808:	47c0      	blx	r8
 800380a:	3001      	adds	r0, #1
 800380c:	d09a      	beq.n	8003744 <_printf_i+0x12c>
 800380e:	3501      	adds	r5, #1
 8003810:	68e3      	ldr	r3, [r4, #12]
 8003812:	9a03      	ldr	r2, [sp, #12]
 8003814:	1a9b      	subs	r3, r3, r2
 8003816:	42ab      	cmp	r3, r5
 8003818:	dcf2      	bgt.n	8003800 <_printf_i+0x1e8>
 800381a:	e7eb      	b.n	80037f4 <_printf_i+0x1dc>
 800381c:	2500      	movs	r5, #0
 800381e:	f104 0919 	add.w	r9, r4, #25
 8003822:	e7f5      	b.n	8003810 <_printf_i+0x1f8>
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1ac      	bne.n	8003782 <_printf_i+0x16a>
 8003828:	7803      	ldrb	r3, [r0, #0]
 800382a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800382e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003832:	e76c      	b.n	800370e <_printf_i+0xf6>
 8003834:	08003fa9 	.word	0x08003fa9
 8003838:	08003fba 	.word	0x08003fba

0800383c <_sbrk_r>:
 800383c:	b538      	push	{r3, r4, r5, lr}
 800383e:	2300      	movs	r3, #0
 8003840:	4c05      	ldr	r4, [pc, #20]	; (8003858 <_sbrk_r+0x1c>)
 8003842:	4605      	mov	r5, r0
 8003844:	4608      	mov	r0, r1
 8003846:	6023      	str	r3, [r4, #0]
 8003848:	f7fd fa5c 	bl	8000d04 <_sbrk>
 800384c:	1c43      	adds	r3, r0, #1
 800384e:	d102      	bne.n	8003856 <_sbrk_r+0x1a>
 8003850:	6823      	ldr	r3, [r4, #0]
 8003852:	b103      	cbz	r3, 8003856 <_sbrk_r+0x1a>
 8003854:	602b      	str	r3, [r5, #0]
 8003856:	bd38      	pop	{r3, r4, r5, pc}
 8003858:	200003d0 	.word	0x200003d0

0800385c <__sread>:
 800385c:	b510      	push	{r4, lr}
 800385e:	460c      	mov	r4, r1
 8003860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003864:	f000 faec 	bl	8003e40 <_read_r>
 8003868:	2800      	cmp	r0, #0
 800386a:	bfab      	itete	ge
 800386c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800386e:	89a3      	ldrhlt	r3, [r4, #12]
 8003870:	181b      	addge	r3, r3, r0
 8003872:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003876:	bfac      	ite	ge
 8003878:	6563      	strge	r3, [r4, #84]	; 0x54
 800387a:	81a3      	strhlt	r3, [r4, #12]
 800387c:	bd10      	pop	{r4, pc}

0800387e <__swrite>:
 800387e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003882:	461f      	mov	r7, r3
 8003884:	898b      	ldrh	r3, [r1, #12]
 8003886:	4605      	mov	r5, r0
 8003888:	05db      	lsls	r3, r3, #23
 800388a:	460c      	mov	r4, r1
 800388c:	4616      	mov	r6, r2
 800388e:	d505      	bpl.n	800389c <__swrite+0x1e>
 8003890:	2302      	movs	r3, #2
 8003892:	2200      	movs	r2, #0
 8003894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003898:	f000 f9b6 	bl	8003c08 <_lseek_r>
 800389c:	89a3      	ldrh	r3, [r4, #12]
 800389e:	4632      	mov	r2, r6
 80038a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038a4:	81a3      	strh	r3, [r4, #12]
 80038a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038aa:	463b      	mov	r3, r7
 80038ac:	4628      	mov	r0, r5
 80038ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038b2:	f000 b869 	b.w	8003988 <_write_r>

080038b6 <__sseek>:
 80038b6:	b510      	push	{r4, lr}
 80038b8:	460c      	mov	r4, r1
 80038ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038be:	f000 f9a3 	bl	8003c08 <_lseek_r>
 80038c2:	1c43      	adds	r3, r0, #1
 80038c4:	89a3      	ldrh	r3, [r4, #12]
 80038c6:	bf15      	itete	ne
 80038c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80038ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80038ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80038d2:	81a3      	strheq	r3, [r4, #12]
 80038d4:	bf18      	it	ne
 80038d6:	81a3      	strhne	r3, [r4, #12]
 80038d8:	bd10      	pop	{r4, pc}

080038da <__sclose>:
 80038da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038de:	f000 b8d3 	b.w	8003a88 <_close_r>
	...

080038e4 <__swbuf_r>:
 80038e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e6:	460e      	mov	r6, r1
 80038e8:	4614      	mov	r4, r2
 80038ea:	4605      	mov	r5, r0
 80038ec:	b118      	cbz	r0, 80038f6 <__swbuf_r+0x12>
 80038ee:	6983      	ldr	r3, [r0, #24]
 80038f0:	b90b      	cbnz	r3, 80038f6 <__swbuf_r+0x12>
 80038f2:	f7ff faa7 	bl	8002e44 <__sinit>
 80038f6:	4b21      	ldr	r3, [pc, #132]	; (800397c <__swbuf_r+0x98>)
 80038f8:	429c      	cmp	r4, r3
 80038fa:	d12a      	bne.n	8003952 <__swbuf_r+0x6e>
 80038fc:	686c      	ldr	r4, [r5, #4]
 80038fe:	69a3      	ldr	r3, [r4, #24]
 8003900:	60a3      	str	r3, [r4, #8]
 8003902:	89a3      	ldrh	r3, [r4, #12]
 8003904:	071a      	lsls	r2, r3, #28
 8003906:	d52e      	bpl.n	8003966 <__swbuf_r+0x82>
 8003908:	6923      	ldr	r3, [r4, #16]
 800390a:	b363      	cbz	r3, 8003966 <__swbuf_r+0x82>
 800390c:	6923      	ldr	r3, [r4, #16]
 800390e:	6820      	ldr	r0, [r4, #0]
 8003910:	b2f6      	uxtb	r6, r6
 8003912:	1ac0      	subs	r0, r0, r3
 8003914:	6963      	ldr	r3, [r4, #20]
 8003916:	4637      	mov	r7, r6
 8003918:	4283      	cmp	r3, r0
 800391a:	dc04      	bgt.n	8003926 <__swbuf_r+0x42>
 800391c:	4621      	mov	r1, r4
 800391e:	4628      	mov	r0, r5
 8003920:	f000 f948 	bl	8003bb4 <_fflush_r>
 8003924:	bb28      	cbnz	r0, 8003972 <__swbuf_r+0x8e>
 8003926:	68a3      	ldr	r3, [r4, #8]
 8003928:	3001      	adds	r0, #1
 800392a:	3b01      	subs	r3, #1
 800392c:	60a3      	str	r3, [r4, #8]
 800392e:	6823      	ldr	r3, [r4, #0]
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	6022      	str	r2, [r4, #0]
 8003934:	701e      	strb	r6, [r3, #0]
 8003936:	6963      	ldr	r3, [r4, #20]
 8003938:	4283      	cmp	r3, r0
 800393a:	d004      	beq.n	8003946 <__swbuf_r+0x62>
 800393c:	89a3      	ldrh	r3, [r4, #12]
 800393e:	07db      	lsls	r3, r3, #31
 8003940:	d519      	bpl.n	8003976 <__swbuf_r+0x92>
 8003942:	2e0a      	cmp	r6, #10
 8003944:	d117      	bne.n	8003976 <__swbuf_r+0x92>
 8003946:	4621      	mov	r1, r4
 8003948:	4628      	mov	r0, r5
 800394a:	f000 f933 	bl	8003bb4 <_fflush_r>
 800394e:	b190      	cbz	r0, 8003976 <__swbuf_r+0x92>
 8003950:	e00f      	b.n	8003972 <__swbuf_r+0x8e>
 8003952:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <__swbuf_r+0x9c>)
 8003954:	429c      	cmp	r4, r3
 8003956:	d101      	bne.n	800395c <__swbuf_r+0x78>
 8003958:	68ac      	ldr	r4, [r5, #8]
 800395a:	e7d0      	b.n	80038fe <__swbuf_r+0x1a>
 800395c:	4b09      	ldr	r3, [pc, #36]	; (8003984 <__swbuf_r+0xa0>)
 800395e:	429c      	cmp	r4, r3
 8003960:	bf08      	it	eq
 8003962:	68ec      	ldreq	r4, [r5, #12]
 8003964:	e7cb      	b.n	80038fe <__swbuf_r+0x1a>
 8003966:	4621      	mov	r1, r4
 8003968:	4628      	mov	r0, r5
 800396a:	f000 f81f 	bl	80039ac <__swsetup_r>
 800396e:	2800      	cmp	r0, #0
 8003970:	d0cc      	beq.n	800390c <__swbuf_r+0x28>
 8003972:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003976:	4638      	mov	r0, r7
 8003978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800397a:	bf00      	nop
 800397c:	08003f58 	.word	0x08003f58
 8003980:	08003f78 	.word	0x08003f78
 8003984:	08003f38 	.word	0x08003f38

08003988 <_write_r>:
 8003988:	b538      	push	{r3, r4, r5, lr}
 800398a:	4605      	mov	r5, r0
 800398c:	4608      	mov	r0, r1
 800398e:	4611      	mov	r1, r2
 8003990:	2200      	movs	r2, #0
 8003992:	4c05      	ldr	r4, [pc, #20]	; (80039a8 <_write_r+0x20>)
 8003994:	6022      	str	r2, [r4, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	f7fd f967 	bl	8000c6a <_write>
 800399c:	1c43      	adds	r3, r0, #1
 800399e:	d102      	bne.n	80039a6 <_write_r+0x1e>
 80039a0:	6823      	ldr	r3, [r4, #0]
 80039a2:	b103      	cbz	r3, 80039a6 <_write_r+0x1e>
 80039a4:	602b      	str	r3, [r5, #0]
 80039a6:	bd38      	pop	{r3, r4, r5, pc}
 80039a8:	200003d0 	.word	0x200003d0

080039ac <__swsetup_r>:
 80039ac:	4b32      	ldr	r3, [pc, #200]	; (8003a78 <__swsetup_r+0xcc>)
 80039ae:	b570      	push	{r4, r5, r6, lr}
 80039b0:	681d      	ldr	r5, [r3, #0]
 80039b2:	4606      	mov	r6, r0
 80039b4:	460c      	mov	r4, r1
 80039b6:	b125      	cbz	r5, 80039c2 <__swsetup_r+0x16>
 80039b8:	69ab      	ldr	r3, [r5, #24]
 80039ba:	b913      	cbnz	r3, 80039c2 <__swsetup_r+0x16>
 80039bc:	4628      	mov	r0, r5
 80039be:	f7ff fa41 	bl	8002e44 <__sinit>
 80039c2:	4b2e      	ldr	r3, [pc, #184]	; (8003a7c <__swsetup_r+0xd0>)
 80039c4:	429c      	cmp	r4, r3
 80039c6:	d10f      	bne.n	80039e8 <__swsetup_r+0x3c>
 80039c8:	686c      	ldr	r4, [r5, #4]
 80039ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	0715      	lsls	r5, r2, #28
 80039d2:	d42c      	bmi.n	8003a2e <__swsetup_r+0x82>
 80039d4:	06d0      	lsls	r0, r2, #27
 80039d6:	d411      	bmi.n	80039fc <__swsetup_r+0x50>
 80039d8:	2209      	movs	r2, #9
 80039da:	6032      	str	r2, [r6, #0]
 80039dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039e0:	81a3      	strh	r3, [r4, #12]
 80039e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039e6:	e03e      	b.n	8003a66 <__swsetup_r+0xba>
 80039e8:	4b25      	ldr	r3, [pc, #148]	; (8003a80 <__swsetup_r+0xd4>)
 80039ea:	429c      	cmp	r4, r3
 80039ec:	d101      	bne.n	80039f2 <__swsetup_r+0x46>
 80039ee:	68ac      	ldr	r4, [r5, #8]
 80039f0:	e7eb      	b.n	80039ca <__swsetup_r+0x1e>
 80039f2:	4b24      	ldr	r3, [pc, #144]	; (8003a84 <__swsetup_r+0xd8>)
 80039f4:	429c      	cmp	r4, r3
 80039f6:	bf08      	it	eq
 80039f8:	68ec      	ldreq	r4, [r5, #12]
 80039fa:	e7e6      	b.n	80039ca <__swsetup_r+0x1e>
 80039fc:	0751      	lsls	r1, r2, #29
 80039fe:	d512      	bpl.n	8003a26 <__swsetup_r+0x7a>
 8003a00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a02:	b141      	cbz	r1, 8003a16 <__swsetup_r+0x6a>
 8003a04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a08:	4299      	cmp	r1, r3
 8003a0a:	d002      	beq.n	8003a12 <__swsetup_r+0x66>
 8003a0c:	4630      	mov	r0, r6
 8003a0e:	f000 f9a5 	bl	8003d5c <_free_r>
 8003a12:	2300      	movs	r3, #0
 8003a14:	6363      	str	r3, [r4, #52]	; 0x34
 8003a16:	89a3      	ldrh	r3, [r4, #12]
 8003a18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003a1c:	81a3      	strh	r3, [r4, #12]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	6063      	str	r3, [r4, #4]
 8003a22:	6923      	ldr	r3, [r4, #16]
 8003a24:	6023      	str	r3, [r4, #0]
 8003a26:	89a3      	ldrh	r3, [r4, #12]
 8003a28:	f043 0308 	orr.w	r3, r3, #8
 8003a2c:	81a3      	strh	r3, [r4, #12]
 8003a2e:	6923      	ldr	r3, [r4, #16]
 8003a30:	b94b      	cbnz	r3, 8003a46 <__swsetup_r+0x9a>
 8003a32:	89a3      	ldrh	r3, [r4, #12]
 8003a34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a3c:	d003      	beq.n	8003a46 <__swsetup_r+0x9a>
 8003a3e:	4621      	mov	r1, r4
 8003a40:	4630      	mov	r0, r6
 8003a42:	f000 f917 	bl	8003c74 <__smakebuf_r>
 8003a46:	89a2      	ldrh	r2, [r4, #12]
 8003a48:	f012 0301 	ands.w	r3, r2, #1
 8003a4c:	d00c      	beq.n	8003a68 <__swsetup_r+0xbc>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60a3      	str	r3, [r4, #8]
 8003a52:	6963      	ldr	r3, [r4, #20]
 8003a54:	425b      	negs	r3, r3
 8003a56:	61a3      	str	r3, [r4, #24]
 8003a58:	6923      	ldr	r3, [r4, #16]
 8003a5a:	b953      	cbnz	r3, 8003a72 <__swsetup_r+0xc6>
 8003a5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a60:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003a64:	d1ba      	bne.n	80039dc <__swsetup_r+0x30>
 8003a66:	bd70      	pop	{r4, r5, r6, pc}
 8003a68:	0792      	lsls	r2, r2, #30
 8003a6a:	bf58      	it	pl
 8003a6c:	6963      	ldrpl	r3, [r4, #20]
 8003a6e:	60a3      	str	r3, [r4, #8]
 8003a70:	e7f2      	b.n	8003a58 <__swsetup_r+0xac>
 8003a72:	2000      	movs	r0, #0
 8003a74:	e7f7      	b.n	8003a66 <__swsetup_r+0xba>
 8003a76:	bf00      	nop
 8003a78:	2000000c 	.word	0x2000000c
 8003a7c:	08003f58 	.word	0x08003f58
 8003a80:	08003f78 	.word	0x08003f78
 8003a84:	08003f38 	.word	0x08003f38

08003a88 <_close_r>:
 8003a88:	b538      	push	{r3, r4, r5, lr}
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	4c05      	ldr	r4, [pc, #20]	; (8003aa4 <_close_r+0x1c>)
 8003a8e:	4605      	mov	r5, r0
 8003a90:	4608      	mov	r0, r1
 8003a92:	6023      	str	r3, [r4, #0]
 8003a94:	f7fd f905 	bl	8000ca2 <_close>
 8003a98:	1c43      	adds	r3, r0, #1
 8003a9a:	d102      	bne.n	8003aa2 <_close_r+0x1a>
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	b103      	cbz	r3, 8003aa2 <_close_r+0x1a>
 8003aa0:	602b      	str	r3, [r5, #0]
 8003aa2:	bd38      	pop	{r3, r4, r5, pc}
 8003aa4:	200003d0 	.word	0x200003d0

08003aa8 <__sflush_r>:
 8003aa8:	898a      	ldrh	r2, [r1, #12]
 8003aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aae:	4605      	mov	r5, r0
 8003ab0:	0710      	lsls	r0, r2, #28
 8003ab2:	460c      	mov	r4, r1
 8003ab4:	d458      	bmi.n	8003b68 <__sflush_r+0xc0>
 8003ab6:	684b      	ldr	r3, [r1, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	dc05      	bgt.n	8003ac8 <__sflush_r+0x20>
 8003abc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	dc02      	bgt.n	8003ac8 <__sflush_r+0x20>
 8003ac2:	2000      	movs	r0, #0
 8003ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ac8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003aca:	2e00      	cmp	r6, #0
 8003acc:	d0f9      	beq.n	8003ac2 <__sflush_r+0x1a>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ad4:	682f      	ldr	r7, [r5, #0]
 8003ad6:	6a21      	ldr	r1, [r4, #32]
 8003ad8:	602b      	str	r3, [r5, #0]
 8003ada:	d032      	beq.n	8003b42 <__sflush_r+0x9a>
 8003adc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ade:	89a3      	ldrh	r3, [r4, #12]
 8003ae0:	075a      	lsls	r2, r3, #29
 8003ae2:	d505      	bpl.n	8003af0 <__sflush_r+0x48>
 8003ae4:	6863      	ldr	r3, [r4, #4]
 8003ae6:	1ac0      	subs	r0, r0, r3
 8003ae8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003aea:	b10b      	cbz	r3, 8003af0 <__sflush_r+0x48>
 8003aec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003aee:	1ac0      	subs	r0, r0, r3
 8003af0:	2300      	movs	r3, #0
 8003af2:	4602      	mov	r2, r0
 8003af4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003af6:	6a21      	ldr	r1, [r4, #32]
 8003af8:	4628      	mov	r0, r5
 8003afa:	47b0      	blx	r6
 8003afc:	1c43      	adds	r3, r0, #1
 8003afe:	89a3      	ldrh	r3, [r4, #12]
 8003b00:	d106      	bne.n	8003b10 <__sflush_r+0x68>
 8003b02:	6829      	ldr	r1, [r5, #0]
 8003b04:	291d      	cmp	r1, #29
 8003b06:	d848      	bhi.n	8003b9a <__sflush_r+0xf2>
 8003b08:	4a29      	ldr	r2, [pc, #164]	; (8003bb0 <__sflush_r+0x108>)
 8003b0a:	40ca      	lsrs	r2, r1
 8003b0c:	07d6      	lsls	r6, r2, #31
 8003b0e:	d544      	bpl.n	8003b9a <__sflush_r+0xf2>
 8003b10:	2200      	movs	r2, #0
 8003b12:	6062      	str	r2, [r4, #4]
 8003b14:	6922      	ldr	r2, [r4, #16]
 8003b16:	04d9      	lsls	r1, r3, #19
 8003b18:	6022      	str	r2, [r4, #0]
 8003b1a:	d504      	bpl.n	8003b26 <__sflush_r+0x7e>
 8003b1c:	1c42      	adds	r2, r0, #1
 8003b1e:	d101      	bne.n	8003b24 <__sflush_r+0x7c>
 8003b20:	682b      	ldr	r3, [r5, #0]
 8003b22:	b903      	cbnz	r3, 8003b26 <__sflush_r+0x7e>
 8003b24:	6560      	str	r0, [r4, #84]	; 0x54
 8003b26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b28:	602f      	str	r7, [r5, #0]
 8003b2a:	2900      	cmp	r1, #0
 8003b2c:	d0c9      	beq.n	8003ac2 <__sflush_r+0x1a>
 8003b2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b32:	4299      	cmp	r1, r3
 8003b34:	d002      	beq.n	8003b3c <__sflush_r+0x94>
 8003b36:	4628      	mov	r0, r5
 8003b38:	f000 f910 	bl	8003d5c <_free_r>
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	6360      	str	r0, [r4, #52]	; 0x34
 8003b40:	e7c0      	b.n	8003ac4 <__sflush_r+0x1c>
 8003b42:	2301      	movs	r3, #1
 8003b44:	4628      	mov	r0, r5
 8003b46:	47b0      	blx	r6
 8003b48:	1c41      	adds	r1, r0, #1
 8003b4a:	d1c8      	bne.n	8003ade <__sflush_r+0x36>
 8003b4c:	682b      	ldr	r3, [r5, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0c5      	beq.n	8003ade <__sflush_r+0x36>
 8003b52:	2b1d      	cmp	r3, #29
 8003b54:	d001      	beq.n	8003b5a <__sflush_r+0xb2>
 8003b56:	2b16      	cmp	r3, #22
 8003b58:	d101      	bne.n	8003b5e <__sflush_r+0xb6>
 8003b5a:	602f      	str	r7, [r5, #0]
 8003b5c:	e7b1      	b.n	8003ac2 <__sflush_r+0x1a>
 8003b5e:	89a3      	ldrh	r3, [r4, #12]
 8003b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b64:	81a3      	strh	r3, [r4, #12]
 8003b66:	e7ad      	b.n	8003ac4 <__sflush_r+0x1c>
 8003b68:	690f      	ldr	r7, [r1, #16]
 8003b6a:	2f00      	cmp	r7, #0
 8003b6c:	d0a9      	beq.n	8003ac2 <__sflush_r+0x1a>
 8003b6e:	0793      	lsls	r3, r2, #30
 8003b70:	bf18      	it	ne
 8003b72:	2300      	movne	r3, #0
 8003b74:	680e      	ldr	r6, [r1, #0]
 8003b76:	bf08      	it	eq
 8003b78:	694b      	ldreq	r3, [r1, #20]
 8003b7a:	eba6 0807 	sub.w	r8, r6, r7
 8003b7e:	600f      	str	r7, [r1, #0]
 8003b80:	608b      	str	r3, [r1, #8]
 8003b82:	f1b8 0f00 	cmp.w	r8, #0
 8003b86:	dd9c      	ble.n	8003ac2 <__sflush_r+0x1a>
 8003b88:	4643      	mov	r3, r8
 8003b8a:	463a      	mov	r2, r7
 8003b8c:	6a21      	ldr	r1, [r4, #32]
 8003b8e:	4628      	mov	r0, r5
 8003b90:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b92:	47b0      	blx	r6
 8003b94:	2800      	cmp	r0, #0
 8003b96:	dc06      	bgt.n	8003ba6 <__sflush_r+0xfe>
 8003b98:	89a3      	ldrh	r3, [r4, #12]
 8003b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b9e:	81a3      	strh	r3, [r4, #12]
 8003ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ba4:	e78e      	b.n	8003ac4 <__sflush_r+0x1c>
 8003ba6:	4407      	add	r7, r0
 8003ba8:	eba8 0800 	sub.w	r8, r8, r0
 8003bac:	e7e9      	b.n	8003b82 <__sflush_r+0xda>
 8003bae:	bf00      	nop
 8003bb0:	20400001 	.word	0x20400001

08003bb4 <_fflush_r>:
 8003bb4:	b538      	push	{r3, r4, r5, lr}
 8003bb6:	690b      	ldr	r3, [r1, #16]
 8003bb8:	4605      	mov	r5, r0
 8003bba:	460c      	mov	r4, r1
 8003bbc:	b1db      	cbz	r3, 8003bf6 <_fflush_r+0x42>
 8003bbe:	b118      	cbz	r0, 8003bc8 <_fflush_r+0x14>
 8003bc0:	6983      	ldr	r3, [r0, #24]
 8003bc2:	b90b      	cbnz	r3, 8003bc8 <_fflush_r+0x14>
 8003bc4:	f7ff f93e 	bl	8002e44 <__sinit>
 8003bc8:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <_fflush_r+0x48>)
 8003bca:	429c      	cmp	r4, r3
 8003bcc:	d109      	bne.n	8003be2 <_fflush_r+0x2e>
 8003bce:	686c      	ldr	r4, [r5, #4]
 8003bd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bd4:	b17b      	cbz	r3, 8003bf6 <_fflush_r+0x42>
 8003bd6:	4621      	mov	r1, r4
 8003bd8:	4628      	mov	r0, r5
 8003bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bde:	f7ff bf63 	b.w	8003aa8 <__sflush_r>
 8003be2:	4b07      	ldr	r3, [pc, #28]	; (8003c00 <_fflush_r+0x4c>)
 8003be4:	429c      	cmp	r4, r3
 8003be6:	d101      	bne.n	8003bec <_fflush_r+0x38>
 8003be8:	68ac      	ldr	r4, [r5, #8]
 8003bea:	e7f1      	b.n	8003bd0 <_fflush_r+0x1c>
 8003bec:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <_fflush_r+0x50>)
 8003bee:	429c      	cmp	r4, r3
 8003bf0:	bf08      	it	eq
 8003bf2:	68ec      	ldreq	r4, [r5, #12]
 8003bf4:	e7ec      	b.n	8003bd0 <_fflush_r+0x1c>
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	bd38      	pop	{r3, r4, r5, pc}
 8003bfa:	bf00      	nop
 8003bfc:	08003f58 	.word	0x08003f58
 8003c00:	08003f78 	.word	0x08003f78
 8003c04:	08003f38 	.word	0x08003f38

08003c08 <_lseek_r>:
 8003c08:	b538      	push	{r3, r4, r5, lr}
 8003c0a:	4605      	mov	r5, r0
 8003c0c:	4608      	mov	r0, r1
 8003c0e:	4611      	mov	r1, r2
 8003c10:	2200      	movs	r2, #0
 8003c12:	4c05      	ldr	r4, [pc, #20]	; (8003c28 <_lseek_r+0x20>)
 8003c14:	6022      	str	r2, [r4, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	f7fd f867 	bl	8000cea <_lseek>
 8003c1c:	1c43      	adds	r3, r0, #1
 8003c1e:	d102      	bne.n	8003c26 <_lseek_r+0x1e>
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	b103      	cbz	r3, 8003c26 <_lseek_r+0x1e>
 8003c24:	602b      	str	r3, [r5, #0]
 8003c26:	bd38      	pop	{r3, r4, r5, pc}
 8003c28:	200003d0 	.word	0x200003d0

08003c2c <__swhatbuf_r>:
 8003c2c:	b570      	push	{r4, r5, r6, lr}
 8003c2e:	460e      	mov	r6, r1
 8003c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c34:	b096      	sub	sp, #88	; 0x58
 8003c36:	2900      	cmp	r1, #0
 8003c38:	4614      	mov	r4, r2
 8003c3a:	461d      	mov	r5, r3
 8003c3c:	da07      	bge.n	8003c4e <__swhatbuf_r+0x22>
 8003c3e:	2300      	movs	r3, #0
 8003c40:	602b      	str	r3, [r5, #0]
 8003c42:	89b3      	ldrh	r3, [r6, #12]
 8003c44:	061a      	lsls	r2, r3, #24
 8003c46:	d410      	bmi.n	8003c6a <__swhatbuf_r+0x3e>
 8003c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c4c:	e00e      	b.n	8003c6c <__swhatbuf_r+0x40>
 8003c4e:	466a      	mov	r2, sp
 8003c50:	f000 f908 	bl	8003e64 <_fstat_r>
 8003c54:	2800      	cmp	r0, #0
 8003c56:	dbf2      	blt.n	8003c3e <__swhatbuf_r+0x12>
 8003c58:	9a01      	ldr	r2, [sp, #4]
 8003c5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003c5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003c62:	425a      	negs	r2, r3
 8003c64:	415a      	adcs	r2, r3
 8003c66:	602a      	str	r2, [r5, #0]
 8003c68:	e7ee      	b.n	8003c48 <__swhatbuf_r+0x1c>
 8003c6a:	2340      	movs	r3, #64	; 0x40
 8003c6c:	2000      	movs	r0, #0
 8003c6e:	6023      	str	r3, [r4, #0]
 8003c70:	b016      	add	sp, #88	; 0x58
 8003c72:	bd70      	pop	{r4, r5, r6, pc}

08003c74 <__smakebuf_r>:
 8003c74:	898b      	ldrh	r3, [r1, #12]
 8003c76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c78:	079d      	lsls	r5, r3, #30
 8003c7a:	4606      	mov	r6, r0
 8003c7c:	460c      	mov	r4, r1
 8003c7e:	d507      	bpl.n	8003c90 <__smakebuf_r+0x1c>
 8003c80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003c84:	6023      	str	r3, [r4, #0]
 8003c86:	6123      	str	r3, [r4, #16]
 8003c88:	2301      	movs	r3, #1
 8003c8a:	6163      	str	r3, [r4, #20]
 8003c8c:	b002      	add	sp, #8
 8003c8e:	bd70      	pop	{r4, r5, r6, pc}
 8003c90:	ab01      	add	r3, sp, #4
 8003c92:	466a      	mov	r2, sp
 8003c94:	f7ff ffca 	bl	8003c2c <__swhatbuf_r>
 8003c98:	9900      	ldr	r1, [sp, #0]
 8003c9a:	4605      	mov	r5, r0
 8003c9c:	4630      	mov	r0, r6
 8003c9e:	f7ff f95b 	bl	8002f58 <_malloc_r>
 8003ca2:	b948      	cbnz	r0, 8003cb8 <__smakebuf_r+0x44>
 8003ca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ca8:	059a      	lsls	r2, r3, #22
 8003caa:	d4ef      	bmi.n	8003c8c <__smakebuf_r+0x18>
 8003cac:	f023 0303 	bic.w	r3, r3, #3
 8003cb0:	f043 0302 	orr.w	r3, r3, #2
 8003cb4:	81a3      	strh	r3, [r4, #12]
 8003cb6:	e7e3      	b.n	8003c80 <__smakebuf_r+0xc>
 8003cb8:	4b0d      	ldr	r3, [pc, #52]	; (8003cf0 <__smakebuf_r+0x7c>)
 8003cba:	62b3      	str	r3, [r6, #40]	; 0x28
 8003cbc:	89a3      	ldrh	r3, [r4, #12]
 8003cbe:	6020      	str	r0, [r4, #0]
 8003cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cc4:	81a3      	strh	r3, [r4, #12]
 8003cc6:	9b00      	ldr	r3, [sp, #0]
 8003cc8:	6120      	str	r0, [r4, #16]
 8003cca:	6163      	str	r3, [r4, #20]
 8003ccc:	9b01      	ldr	r3, [sp, #4]
 8003cce:	b15b      	cbz	r3, 8003ce8 <__smakebuf_r+0x74>
 8003cd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cd4:	4630      	mov	r0, r6
 8003cd6:	f000 f8d7 	bl	8003e88 <_isatty_r>
 8003cda:	b128      	cbz	r0, 8003ce8 <__smakebuf_r+0x74>
 8003cdc:	89a3      	ldrh	r3, [r4, #12]
 8003cde:	f023 0303 	bic.w	r3, r3, #3
 8003ce2:	f043 0301 	orr.w	r3, r3, #1
 8003ce6:	81a3      	strh	r3, [r4, #12]
 8003ce8:	89a3      	ldrh	r3, [r4, #12]
 8003cea:	431d      	orrs	r5, r3
 8003cec:	81a5      	strh	r5, [r4, #12]
 8003cee:	e7cd      	b.n	8003c8c <__smakebuf_r+0x18>
 8003cf0:	08002e0d 	.word	0x08002e0d

08003cf4 <memchr>:
 8003cf4:	b510      	push	{r4, lr}
 8003cf6:	b2c9      	uxtb	r1, r1
 8003cf8:	4402      	add	r2, r0
 8003cfa:	4290      	cmp	r0, r2
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	d101      	bne.n	8003d04 <memchr+0x10>
 8003d00:	2300      	movs	r3, #0
 8003d02:	e003      	b.n	8003d0c <memchr+0x18>
 8003d04:	781c      	ldrb	r4, [r3, #0]
 8003d06:	3001      	adds	r0, #1
 8003d08:	428c      	cmp	r4, r1
 8003d0a:	d1f6      	bne.n	8003cfa <memchr+0x6>
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	bd10      	pop	{r4, pc}

08003d10 <memcpy>:
 8003d10:	b510      	push	{r4, lr}
 8003d12:	1e43      	subs	r3, r0, #1
 8003d14:	440a      	add	r2, r1
 8003d16:	4291      	cmp	r1, r2
 8003d18:	d100      	bne.n	8003d1c <memcpy+0xc>
 8003d1a:	bd10      	pop	{r4, pc}
 8003d1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d24:	e7f7      	b.n	8003d16 <memcpy+0x6>

08003d26 <memmove>:
 8003d26:	4288      	cmp	r0, r1
 8003d28:	b510      	push	{r4, lr}
 8003d2a:	eb01 0302 	add.w	r3, r1, r2
 8003d2e:	d807      	bhi.n	8003d40 <memmove+0x1a>
 8003d30:	1e42      	subs	r2, r0, #1
 8003d32:	4299      	cmp	r1, r3
 8003d34:	d00a      	beq.n	8003d4c <memmove+0x26>
 8003d36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d3a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003d3e:	e7f8      	b.n	8003d32 <memmove+0xc>
 8003d40:	4283      	cmp	r3, r0
 8003d42:	d9f5      	bls.n	8003d30 <memmove+0xa>
 8003d44:	1881      	adds	r1, r0, r2
 8003d46:	1ad2      	subs	r2, r2, r3
 8003d48:	42d3      	cmn	r3, r2
 8003d4a:	d100      	bne.n	8003d4e <memmove+0x28>
 8003d4c:	bd10      	pop	{r4, pc}
 8003d4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d52:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003d56:	e7f7      	b.n	8003d48 <memmove+0x22>

08003d58 <__malloc_lock>:
 8003d58:	4770      	bx	lr

08003d5a <__malloc_unlock>:
 8003d5a:	4770      	bx	lr

08003d5c <_free_r>:
 8003d5c:	b538      	push	{r3, r4, r5, lr}
 8003d5e:	4605      	mov	r5, r0
 8003d60:	2900      	cmp	r1, #0
 8003d62:	d043      	beq.n	8003dec <_free_r+0x90>
 8003d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d68:	1f0c      	subs	r4, r1, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	bfb8      	it	lt
 8003d6e:	18e4      	addlt	r4, r4, r3
 8003d70:	f7ff fff2 	bl	8003d58 <__malloc_lock>
 8003d74:	4a1e      	ldr	r2, [pc, #120]	; (8003df0 <_free_r+0x94>)
 8003d76:	6813      	ldr	r3, [r2, #0]
 8003d78:	4610      	mov	r0, r2
 8003d7a:	b933      	cbnz	r3, 8003d8a <_free_r+0x2e>
 8003d7c:	6063      	str	r3, [r4, #4]
 8003d7e:	6014      	str	r4, [r2, #0]
 8003d80:	4628      	mov	r0, r5
 8003d82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d86:	f7ff bfe8 	b.w	8003d5a <__malloc_unlock>
 8003d8a:	42a3      	cmp	r3, r4
 8003d8c:	d90b      	bls.n	8003da6 <_free_r+0x4a>
 8003d8e:	6821      	ldr	r1, [r4, #0]
 8003d90:	1862      	adds	r2, r4, r1
 8003d92:	4293      	cmp	r3, r2
 8003d94:	bf01      	itttt	eq
 8003d96:	681a      	ldreq	r2, [r3, #0]
 8003d98:	685b      	ldreq	r3, [r3, #4]
 8003d9a:	1852      	addeq	r2, r2, r1
 8003d9c:	6022      	streq	r2, [r4, #0]
 8003d9e:	6063      	str	r3, [r4, #4]
 8003da0:	6004      	str	r4, [r0, #0]
 8003da2:	e7ed      	b.n	8003d80 <_free_r+0x24>
 8003da4:	4613      	mov	r3, r2
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	b10a      	cbz	r2, 8003dae <_free_r+0x52>
 8003daa:	42a2      	cmp	r2, r4
 8003dac:	d9fa      	bls.n	8003da4 <_free_r+0x48>
 8003dae:	6819      	ldr	r1, [r3, #0]
 8003db0:	1858      	adds	r0, r3, r1
 8003db2:	42a0      	cmp	r0, r4
 8003db4:	d10b      	bne.n	8003dce <_free_r+0x72>
 8003db6:	6820      	ldr	r0, [r4, #0]
 8003db8:	4401      	add	r1, r0
 8003dba:	1858      	adds	r0, r3, r1
 8003dbc:	4282      	cmp	r2, r0
 8003dbe:	6019      	str	r1, [r3, #0]
 8003dc0:	d1de      	bne.n	8003d80 <_free_r+0x24>
 8003dc2:	6810      	ldr	r0, [r2, #0]
 8003dc4:	6852      	ldr	r2, [r2, #4]
 8003dc6:	4401      	add	r1, r0
 8003dc8:	6019      	str	r1, [r3, #0]
 8003dca:	605a      	str	r2, [r3, #4]
 8003dcc:	e7d8      	b.n	8003d80 <_free_r+0x24>
 8003dce:	d902      	bls.n	8003dd6 <_free_r+0x7a>
 8003dd0:	230c      	movs	r3, #12
 8003dd2:	602b      	str	r3, [r5, #0]
 8003dd4:	e7d4      	b.n	8003d80 <_free_r+0x24>
 8003dd6:	6820      	ldr	r0, [r4, #0]
 8003dd8:	1821      	adds	r1, r4, r0
 8003dda:	428a      	cmp	r2, r1
 8003ddc:	bf01      	itttt	eq
 8003dde:	6811      	ldreq	r1, [r2, #0]
 8003de0:	6852      	ldreq	r2, [r2, #4]
 8003de2:	1809      	addeq	r1, r1, r0
 8003de4:	6021      	streq	r1, [r4, #0]
 8003de6:	6062      	str	r2, [r4, #4]
 8003de8:	605c      	str	r4, [r3, #4]
 8003dea:	e7c9      	b.n	8003d80 <_free_r+0x24>
 8003dec:	bd38      	pop	{r3, r4, r5, pc}
 8003dee:	bf00      	nop
 8003df0:	2000031c 	.word	0x2000031c

08003df4 <_realloc_r>:
 8003df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df6:	4607      	mov	r7, r0
 8003df8:	4614      	mov	r4, r2
 8003dfa:	460e      	mov	r6, r1
 8003dfc:	b921      	cbnz	r1, 8003e08 <_realloc_r+0x14>
 8003dfe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003e02:	4611      	mov	r1, r2
 8003e04:	f7ff b8a8 	b.w	8002f58 <_malloc_r>
 8003e08:	b922      	cbnz	r2, 8003e14 <_realloc_r+0x20>
 8003e0a:	f7ff ffa7 	bl	8003d5c <_free_r>
 8003e0e:	4625      	mov	r5, r4
 8003e10:	4628      	mov	r0, r5
 8003e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e14:	f000 f848 	bl	8003ea8 <_malloc_usable_size_r>
 8003e18:	42a0      	cmp	r0, r4
 8003e1a:	d20f      	bcs.n	8003e3c <_realloc_r+0x48>
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	4638      	mov	r0, r7
 8003e20:	f7ff f89a 	bl	8002f58 <_malloc_r>
 8003e24:	4605      	mov	r5, r0
 8003e26:	2800      	cmp	r0, #0
 8003e28:	d0f2      	beq.n	8003e10 <_realloc_r+0x1c>
 8003e2a:	4631      	mov	r1, r6
 8003e2c:	4622      	mov	r2, r4
 8003e2e:	f7ff ff6f 	bl	8003d10 <memcpy>
 8003e32:	4631      	mov	r1, r6
 8003e34:	4638      	mov	r0, r7
 8003e36:	f7ff ff91 	bl	8003d5c <_free_r>
 8003e3a:	e7e9      	b.n	8003e10 <_realloc_r+0x1c>
 8003e3c:	4635      	mov	r5, r6
 8003e3e:	e7e7      	b.n	8003e10 <_realloc_r+0x1c>

08003e40 <_read_r>:
 8003e40:	b538      	push	{r3, r4, r5, lr}
 8003e42:	4605      	mov	r5, r0
 8003e44:	4608      	mov	r0, r1
 8003e46:	4611      	mov	r1, r2
 8003e48:	2200      	movs	r2, #0
 8003e4a:	4c05      	ldr	r4, [pc, #20]	; (8003e60 <_read_r+0x20>)
 8003e4c:	6022      	str	r2, [r4, #0]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f7fc feee 	bl	8000c30 <_read>
 8003e54:	1c43      	adds	r3, r0, #1
 8003e56:	d102      	bne.n	8003e5e <_read_r+0x1e>
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	b103      	cbz	r3, 8003e5e <_read_r+0x1e>
 8003e5c:	602b      	str	r3, [r5, #0]
 8003e5e:	bd38      	pop	{r3, r4, r5, pc}
 8003e60:	200003d0 	.word	0x200003d0

08003e64 <_fstat_r>:
 8003e64:	b538      	push	{r3, r4, r5, lr}
 8003e66:	2300      	movs	r3, #0
 8003e68:	4c06      	ldr	r4, [pc, #24]	; (8003e84 <_fstat_r+0x20>)
 8003e6a:	4605      	mov	r5, r0
 8003e6c:	4608      	mov	r0, r1
 8003e6e:	4611      	mov	r1, r2
 8003e70:	6023      	str	r3, [r4, #0]
 8003e72:	f7fc ff21 	bl	8000cb8 <_fstat>
 8003e76:	1c43      	adds	r3, r0, #1
 8003e78:	d102      	bne.n	8003e80 <_fstat_r+0x1c>
 8003e7a:	6823      	ldr	r3, [r4, #0]
 8003e7c:	b103      	cbz	r3, 8003e80 <_fstat_r+0x1c>
 8003e7e:	602b      	str	r3, [r5, #0]
 8003e80:	bd38      	pop	{r3, r4, r5, pc}
 8003e82:	bf00      	nop
 8003e84:	200003d0 	.word	0x200003d0

08003e88 <_isatty_r>:
 8003e88:	b538      	push	{r3, r4, r5, lr}
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	4c05      	ldr	r4, [pc, #20]	; (8003ea4 <_isatty_r+0x1c>)
 8003e8e:	4605      	mov	r5, r0
 8003e90:	4608      	mov	r0, r1
 8003e92:	6023      	str	r3, [r4, #0]
 8003e94:	f7fc ff1f 	bl	8000cd6 <_isatty>
 8003e98:	1c43      	adds	r3, r0, #1
 8003e9a:	d102      	bne.n	8003ea2 <_isatty_r+0x1a>
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	b103      	cbz	r3, 8003ea2 <_isatty_r+0x1a>
 8003ea0:	602b      	str	r3, [r5, #0]
 8003ea2:	bd38      	pop	{r3, r4, r5, pc}
 8003ea4:	200003d0 	.word	0x200003d0

08003ea8 <_malloc_usable_size_r>:
 8003ea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003eac:	1f18      	subs	r0, r3, #4
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	bfbc      	itt	lt
 8003eb2:	580b      	ldrlt	r3, [r1, r0]
 8003eb4:	18c0      	addlt	r0, r0, r3
 8003eb6:	4770      	bx	lr

08003eb8 <_init>:
 8003eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eba:	bf00      	nop
 8003ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ebe:	bc08      	pop	{r3}
 8003ec0:	469e      	mov	lr, r3
 8003ec2:	4770      	bx	lr

08003ec4 <_fini>:
 8003ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec6:	bf00      	nop
 8003ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eca:	bc08      	pop	{r3}
 8003ecc:	469e      	mov	lr, r3
 8003ece:	4770      	bx	lr
